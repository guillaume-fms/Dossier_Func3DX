/* Rule created by ng86534 1/22/2020 */ 
/* Rule modified by ng8318f 5/14/2020 -BL-Optimization(N2H-6928)*/
/* ThisObject -> VPMInstance
/* Parameters -> RuleContext */

Include "Eurodrone_InstanceMethodsLib"
Include "Eurodrone_Util"
Let pIsFixedInstance(ValuePointer)
Let bUnderCha (Boolean)
Let userRole (String)
Let listResultInsts (List)
Let attrLitList (List)
let counter (Integer)
Let pGenericPointer (ValuePointer)
Let strRsccEurodroneSheetName (String)
Let rscEurodroneSheet (DTSheetType)
Let strAttrReplacedBy (String)
Let designStageValue (String)
Let bDemote (Boolean)
Let bPromote (Boolean)
Let strAttrDesignStatus (String)
Let strAttrDesignStatusValNA (String)
Let strAttrDesignStatusValWIP (String)
Let strAttrDesignStatusValFrozen (String)


Let childrenList(List)
Let childNode(VPMReference)
Let listThisChildren(List)
Let index(Integer)
Let strAPN(String)
Let lastIndex(Integer)
Let partLength(Integer)
Let strTemp1(String)
Let strTemp2(String)
Let k(Integer)
Let strNewTitle(String)

Let strAttrDesignStatusValReleased (String)
Let strAttrDesignStage (String)
Let strAttrDesignStageValNA (String)
Let strAttrDesignStageValNotYetDefined (String)
Let listAttrDesignStatusAuthValues (List)
Let indexDSValues(Integer)
Let designStage (String)
/* Allow Design Status NA */
Let bAllowDesignStatusValNA (Boolean)
Let listThisInstOwners (List)
Let listThisInsts (List)
Let objThisInstOwner (Feature)
Let strDescriptionValue (String)
Let strDescriptionSearchPattern (String)
Let listAttrDesignStatusValues (List)
Let strAttrDesignStatusValue (String)
Let listAttrDesignStageValues (List)
Let strAttrDesignStageValue (String)
Let extFileSheet(DTSheetType)
Let idxAttrsRow (Integer)
Let idxAttrsNamesCol (Integer)
Let idxAttrsValuesDocumentCol (Integer)
Let strAttrName (String)
Let strAttrValuesDocument (String)
Let listExtFileSheetNames (List)
Let idxExtFileSheet (Integer)
Let listExtFileSheets (List)
Let listManualDocuments(List)
/* Start - PI8.1: Set NA as default value of PTC attribute */
Let listPTCAttributes(List)
/* Start - PI8.3: Set NA as default value of AITM attribute */
Let listAITMAttributes(List)
Let listLock(List)
Let pLockPointer(ValuePointer)


Let listAIPSAttributes(List)
/*Start[PI3.4] - Added to manage attributes by BL*/
Let strAttributesValuesDocumentName (String)
strAttributesValuesDocumentName = "Eurodrone_INSTANCE_ATTRIBUTES_DOCUMENTS"

/* Combobox for Attributes */
Let listOfAttributesForCombobox (List)
Let listOfAttrValuesOfDocumentsForCombobox (List)
Let idxAttr (Integer)
Let pAttr (ValuePointer)


Let idxAttrRow (Integer)
Let idxAttrValuesCol (Integer)
Let idxAttrDefaultValueCol (Integer)
Let idxAttrDescriptionsCol (Integer)
Let idxAttrObsoleteCol (Integer)
Let strValue (String)
Let strValueNoDesc (String)
Let strDescription (String)
Let listOfAttributeValues (List)
Let strDescription1(String)
Let idxAttrDesc1(Integer)
Let strEditAttrValue(String)
Let listEditAttrValues(List)
Let strObsolete(String)

Let idxEditAttrValue(Integer)
Let strTempAttr(String)
Let idxAttrMultiValueCol(Integer)
Let idxAttrShowDescriptionCol(Integer)
Let strIsMultiValue(String)
Let strIsShowDescription(String)
Let idxPipeSeparator(Integer)
Let list_Attributesfor_Combobox (List)
Let list_AttrValuesDocumentsfor_Combobox (List)
Let list_ListValuefor_Attr (List)
let list_ListValuefor_Attr_default (List)



//Start - PI7.2 Quantity Management ReferTo
Let strAttrDescription (String)
Let strWeightUnitValue (String)
Let strAttrInstUnit (String)
Let strAttrInstQuantity (String)
Let strEditAttributeId (String)



//Start PI:25 N2H-18520 variable
let strTransition(String)
let strObjInstCurrentStatus(String)
let iFromState(String)
let strErrorMsgKey (String)
let strReferenceStatus(String)
let refObjChildList (List)
let objChildReference (VPMReference)
//End PI:25 N2H-18520 variable

Let strInstUnit (String)
Let realInstQuantity (Real)

Let strCurrentValue(String)
Let INSTANCE_UNIT_RANGE_EA (String)
/* Attributes to disable */

Let listDisabledValuePointer (List)

//Get True VPMInstance


Let trueInstance(VPMInstance)
Let ListOvercoating(List)
Let pAttrOvercoat (ValuePointer)
Let pAttrOvercoatHead (ValuePointer)
Let pAttrOvercoatTail (ValuePointer)

let instanceStatus (ValuePointer)
let strParentBusinessType(String)
let attributeInstanceStatus(ValuePointer)
let InstanceStatusValue(String)
let listAttributeValuesForSA(List)

//Added for N2H-28284
let strDesignStage (String)
let strStatusInst (String)
let pointValuesUnticked(ValuePointer)

// START variables/constants N2H-27658
Let listSecondaryFastenerAttribute(List)
Let currentSecoFastAttribute(String)
// END variables/constants N2H-27658

// START added variables for N2H-28227
let pointValueUnlockedForFastener(ValuePointer)
let listPrimaryFastenersAttributeEditable(List)
let selectedPrimeryFastenerAttribute(string) 
// END added variables for N2H-28227

/*Constants*/
listSecondaryFastenerAttribute = List(
	"AIRBUS_E_Instance_EPASSY_InstanceDesignStage",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_TV_Torque_Value",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_BND_Bonding",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_DRILL_Drilling_Operation",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_OVERCOAT_Overcoating",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_WET_Installation_Condition",
	"AIRBUS_E_Instance_EPASSY_Display",
	"AIRBUS_E_Instance_EPASSY_InstanceManualAssociatedDocument",
	"AIRBUS_E_Instance_EPASSY_InstanceProtectiveTreatmentCode",
	"V_description"
)

// START added constant for N2H-28227
listPrimaryFastenersAttributeEditable = List(
	"AIRBUS_E_FST_INSTANCE_DEFINITION_BND_Bonding",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_BND_Process_Code_Both_Side1",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_BND_Protective_Treatment_Code_Both_Side",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_BND_PCM_Code_Both_Side",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_BND_P_Both_Side",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_BND_C_Both_Side",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_BND_M_Both_Side",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_BND_Process_Code_Head_Side1",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_BND_Protective_Treatment_Code_Head_Side",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_BND_PCM_Code_Head_Side",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_BND_P_Head_Side",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_BND_C_Head_Side",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_BND_M_Head_Side",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_BND_Process_Code_Tail_Side1",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_BND_Protective_Treatment_Code_Tail_Side",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_BND_PCM_Code_Tail_Side",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_BND_P_Tail_Side",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_BND_C_Tail_Side",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_BND_M_Tail_Side",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Both_Side1",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Head_Side1",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Tail_Side1",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_ORIENTATION_Head_Side",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_WET_Installation_Condition",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_WET_Protective_Treatment_Code1",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_OVERCOAT_Overcoating",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_OVERCOAT_Overcoating_Both_Side",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_OVERCOAT_Overcoating_Head_Side",
	"AIRBUS_E_FST_INSTANCE_DEFINITION_OVERCOAT_Overcoating_Tail_Side"
)
// END added constant for N2H-28227

idxAttrShowDescriptionCol = 3
idxAttrMultiValueCol = 4
idxAttrDesc1 = 3
idxAttrsRow = 1
idxAttrsNamesCol = 1
idxAttrsValuesDocumentCol = 2

idxAttr = 1

idxAttrValuesCol = 1


idxAttrDefaultValueCol = 2
/*End[PI3.4] - Added to manage attributes by BL*/

userRole = Parameters.Role
Trace(1,"userRole #" ,userRole)

INSTANCE_UNIT_RANGE_EA = "AIRBUS_E_LowerLevel_Unit_Value_Each"
strInstUnit = ""
strWeightUnitValue = ""



strAttrDescription = "V_description"
strAttrInstUnit = "AIRBUS_E_InstanceQuantity_Unit"
strAttrInstQuantity = "AIRBUS_E_InstanceQuantity_Quantity"

Trace (1, "START: Executing Rule >> VPMInstance_PLMAttributesPropagation v3.0: #", Parameters->GetAttributeString("PropagationMode"))
//Added for N2H-15751:Starts

ListOvercoating->Append("NA")
//Added for N2H-20888:Starts
listLock->Append("AIRBUS_E_Instance_EPASSY_InstanceDesignStage")
listLock->Append("AIRBUS_E_Instance_EPASSY_InstanceStatus")
listLock->Append("AIRBUS_E_PTNorm_PTNorm")
listLock->Append("AIRBUS_E_Instance_EPASSY_InstanceProtectiveTreatmentCode")
listLock->Append("AIRBUS_E_Instance_EPASSY_InstanceAssociatedAIPS")
listLock->Append("AIRBUS_E_Instance_EPASSY_InstanceAssociatedAITM")
listLock->Append("AIRBUS_E_Instance_EPASSY_InstanceManualAssociatedDocument")
listLock->Append("AIRBUS_E_Instance_EPASSY_InstanceTechnologicalNotes")
listLock->Append("AIRBUS_E_Instance_EPASSY_InstanceSpecificTechnologicalNotes")
listLock->Append("AIRBUS_E_Instance_EPASSY_Display")
listLock->Append("AIRBUS_E_Instance_EPASSY_InstanceReplaceBy")
listLock->Append("AIRBUS_E_ValidationDate_ValidationObjectID")
listLock->Append("AIRBUS_E_ValidationDate_ValidationDate")
listLock->Append("AIRBUS_E_RPTech_DemoteAllowed")
listLock->Append("AIRBUS_E_RPTech_PromoteAllowed")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_ORIENTATION_Head_Side")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_WET_Installation_Condition")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_WET_Protective_Treatment_Code1")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_OVERCOAT_Overcoating")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_OVERCOAT_Overcoating_Both_Side")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_OVERCOAT_Overcoating_Head_Side")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_OVERCOAT_Overcoating_Tail_Side")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_DRILL_Drilling_Operation")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_DRILL_Drilling_Reference")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_DRILL_Head_Type")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_DRILL_Hole_Tolerance_Code")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_DRILL_Spot")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_DRILL_Oversize")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_DRILL_Material")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_DRILL_Table_selection")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_BND_Bonding")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_BND_Process_Code_Both_Side1")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_BND_Protective_Treatment_Code_Both_Side")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_BND_PCM_Code_Both_Side")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_BND_P_Both_Side")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_BND_C_Both_Side")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_BND_M_Both_Side")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_BND_Process_Code_Head_Side1")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_BND_Protective_Treatment_Code_Head_Side")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_BND_PCM_Code_Head_Side")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_BND_P_Head_Side")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_BND_C_Head_Side")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_BND_M_Head_Side")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_BND_Process_Code_Tail_Side1")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_BND_Protective_Treatment_Code_Tail_Side")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_BND_PCM_Code_Tail_Side")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_BND_P_Tail_Side")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_BND_C_Tail_Side")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_BND_M_Tail_Side")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Both_Side1")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Head_Side1")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Tail_Side1")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_TV_Torque_Value")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_TV_Nominal_Torque_Value")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_TV_Maximum_Torque_Value")
listLock->Append("AIRBUS_E_FST_INSTANCE_DEFINITION_TV_Minimum_Torque_Value")
listLock->Append("V_description")

//Added for N2H-20888
set pAttrOvercoat = ThisObject->GetAttributeValuePointer("AIRBUS_E_FST_INSTANCE_DFM_FSTOVERCOATINGBOTHSIDE")
set pAttrOvercoatHead = ThisObject->GetAttributeValuePointer("AIRBUS_E_FST_INSTANCE_DFM_FSTOVERCOATINGHEADSIDE")
set pAttrOvercoatTail = ThisObject->GetAttributeValuePointer("AIRBUS_E_FST_INSTANCE_DFM_FSTOVERCOATINGTAILSIDE")
//Added for N2H-15751:Ends

strRsccEurodroneSheetName = "KnowledgeResources|Eurodrone_StringResource"
rscEurodroneSheet = CreateSheet(strRsccEurodroneSheetName)
if (rscEurodroneSheet == NULL)


{
	Message("Incorrect Eurodrone String Resource Sheet Path")
}
strAttrReplacedBy = rscEurodroneSheet->CellAsString(rscEurodroneSheet->LocateInColumn(1, "EBOM_ATTR_VPMINSTANCE_REPLACEDBY"), 2)

strAttrDesignStatus = rscEurodroneSheet->CellAsString(rscEurodroneSheet->LocateInColumn(1, "EBOM_ATTR_VPMINSTANCE_DESIGNSTATUS"), 2)
strAttrDesignStatusValNA = rscEurodroneSheet->CellAsString(rscEurodroneSheet->LocateInColumn(1, "EBOM_ATTR_VPMINSTANCE_DESIGNSTATUS_NA"), 2)
strAttrDesignStatusValWIP = rscEurodroneSheet->CellAsString(rscEurodroneSheet->LocateInColumn(1, "EBOM_ATTR_VPMINSTANCE_DESIGNSTATUS_WIP"), 2)

strAttrDesignStatusValFrozen = rscEurodroneSheet->CellAsString(rscEurodroneSheet->LocateInColumn(1, "EBOM_ATTR_VPMINSTANCE_DESIGNSTATUS_FROZEN"), 2)
strAttrDesignStatusValReleased = rscEurodroneSheet->CellAsString(rscEurodroneSheet->LocateInColumn(1, "EBOM_ATTR_VPMINSTANCE_DESIGNSTATUS_RELEASED"), 2)





strAttrDesignStage = rscEurodroneSheet->CellAsString(rscEurodroneSheet->LocateInColumn(1, "EBOM_ATTR_VPMINSTANCE_DESIGNSTAGE"), 2)
strAttrDesignStageValNA = rscEurodroneSheet->CellAsString(rscEurodroneSheet->LocateInColumn(1, "EBOM_ATTR_VPMINSTANCE_DESIGNSTAGE_NA"), 2)


strAttrDesignStageValNotYetDefined = rscEurodroneSheet->CellAsString(rscEurodroneSheet->LocateInColumn(1, "EBOM_ATTR_VPMINSTANCE_DESIGNSTAGE_NOTYETDEFINED"), 2)

let pTechnoNote(ValuePointer)


if (ThisObject -> HasAttribute("AIRBUS_E_Instance_EPASSY_InstanceTechnologicalNotes")) 
{
	pTechnoNote = ThisObject -> GetAttributeValuePointer("AIRBUS_E_Instance_EPASSY_InstanceTechnologicalNotes")
	pTechnoNote.Constant = true
} 

let pSpecificTechnoNote(ValuePointer)

if (ThisObject -> HasAttribute("AIRBUS_E_Instance_EPASSY_InstanceSpecificTechnologicalNotes")) 
{

	pSpecificTechnoNote = ThisObject -> GetAttributeValuePointer("AIRBUS_E_Instance_EPASSY_InstanceSpecificTechnologicalNotes")

	pSpecificTechnoNote.Constant = true


} 

//Starts:Added for N2H-21217
let pFinishingMethod(ValuePointer)
if (ThisObject -> HasAttribute("AIRBUS_E_Instance_FinishingMethod")) 
{
	pFinishingMethod = ThisObject -> GetAttributeValuePointer("AIRBUS_E_Instance_FinishingMethod")
	pFinishingMethod.Constant = true
}

let pGroundingType(ValuePointer)
if (ThisObject -> HasAttribute("AIRBUS_E_Instance_GroundingType")) 
{
	pGroundingType = ThisObject -> GetAttributeValuePointer("AIRBUS_E_Instance_GroundingType")
	pGroundingType.Constant = true
}
//Ends:Added for N2H-21217

if ( Parameters->GetAttributeString("PropagationMode") == "Edition") /* Edition Mode */

{
	//Added:Starts
	childrenList=ThisObject->Eurodrone_InstanceMethodsLib::VPMInstance_GetReference(listThisChildren)
	Trace(1,"Children List.....",childrenList.Size())
	Trace(1,"Children List2.....",listThisChildren.Size())
	index=1
	for index while index<=childrenList.Size()
	{
		childNode=childrenList->GetItem(index)
		Trace(1,"Primary Type>>>>> ",childNode.PrimaryType.Name)
		if(NULL <> childNode AND  "AIRBUS_E_VPMReference_LowerLevel"==childNode.PrimaryType.Name)
		{

			strAPN=childNode->GetAttributeString("AIRBUS_E_Identification_AirbusPartNumber")
			Trace(1,"Child APN>>>>",strAPN)
			strTemp1=ThisObject->GetAttributeString("PLM_ExternalID")
			Trace(1,"Instance Title before Change>>>>>",strTemp1)
			lastIndex=strTemp1.Search(".",0 ,FALSE)
			partLength=strTemp1.Length()
			Trace(1,"Instance Title Length>>>>>",partLength)
			k=partLength-lastIndex
			strTemp2=strTemp1.Extract(lastIndex,k)
			Trace(1,"Length>>>>>",strTemp2)
			strNewTitle=strAPN+strTemp2
			Trace(1,"New Title>>>>",strNewTitle)
			if(strNewTitle <> strTemp1)
			{
				ThisObject->SetAttributeString("PLM_ExternalID",strNewTitle)
			}
			// Added for N2H-26688 :Starts
			strParentBusinessType=Eurodrone_Util::GetParentBusinessType(childNode)
            			Trace(1,"Parent Business Type is ----",strParentBusinessType)
			if(strParentBusinessType == "Storable Assembly")
			{
				Trace(1,"Parent Business Type is SA")
				InstanceStatusValue = ThisObject->GetAttributeString("AIRBUS_E_Instance_EPASSY_InstanceStatus")
				Trace(1,"InstanceStatusValue---",InstanceStatusValue)
				attributeInstanceStatus = ThisObject->GetAttributeValuePointer("AIRBUS_E_Instance_EPASSY_InstanceStatus")
				
				if ((InstanceStatusValue == "" OR InstanceStatusValue == NULL) AND  InstanceStatusValue <> strAttrDesignStatusValNA AND InstanceStatusValue <> strAttrDesignStatusValWIP AND InstanceStatusValue <> strAttrDesignStatusValFrozen AND InstanceStatusValue <> strAttrDesignStatusValReleased)
				{
				   attributeInstanceStatus.Constant = false
				   ThisObject.SetAttributeString("AIRBUS_E_Instance_EPASSY_InstanceStatus",strAttrDesignStatusValNA)
			       listAttributeValuesForSA->Append(strAttrDesignStatusValNA)
			       listAttributeValuesForSA->Append(strAttrDesignStatusValWIP)
			       attributeInstanceStatus.AuthorizedValues = listAttributeValuesForSA
				}
			}
			// Added for N2H-26688 :Starts
			
		}
	}
	//Added:Ends

	/*Start[PI3.4] - Added to manage attributes by BL*/
	/* List of Attributes */
	idxExtFileSheet = listExtFileSheetNames->IndexOf(strAttributesValuesDocumentName, 1)

	if (idxExtFileSheet > 0)
	{
		extFileSheet = listExtFileSheets->GetItem(idxExtFileSheet)
	}
	else 
	{
		extFileSheet = CreateSheet( "KnowledgeResources|"+ strAttributesValuesDocumentName )
		listExtFileSheetNames->Append(strAttributesValuesDocumentName)

		listExtFileSheets->Append(extFileSheet)
	}
	if ( extFileSheet <> NULL )
	{
		for idxAttrsRow while idxAttrsRow < extFileSheet.RowsNb



		{
			strAttrName = extFileSheet.CellAsString(idxAttrsRow, idxAttrsNamesCol)
			strAttrValuesDocument = extFileSheet.CellAsString(idxAttrsRow, idxAttrsValuesDocumentCol)
			
			if ( ("" <> strAttrName) AND (NULL <> strAttrName) AND ("" <> strAttrValuesDocument) AND (NULL <> strAttrValuesDocument) )
			{

				listOfAttributesForCombobox->Append(strAttrName)
				listOfAttrValuesOfDocumentsForCombobox->Append(strAttrValuesDocument)
			}
			


			idxAttrsRow = idxAttrsRow + 1
		}
	}
	/* Combobox for Attributes */
	for idxAttr while idxAttr <= listOfAttributesForCombobox.Size()
	{
		strAttrName = listOfAttributesForCombobox.GetItem(idxAttr)
		strAttrValuesDocument = listOfAttrValuesOfDocumentsForCombobox.GetItem(idxAttr)

		set pAttr = ThisObject->GetAttributeValuePointer(strAttrName)
		idxAttrRow = 1
		strCurrentValue = ThisObject.GetAttributeString(strAttrName)
		listOfAttributeValues.RemoveAll()
		//listOfAttributeValues->Append("AuthorizedValues")

		
		Trace(2, "Attribute : # and initial value: #", strAttrName, strCurrentValue)
		
		idxExtFileSheet = listExtFileSheetNames->IndexOf(strAttrValuesDocument, 1)


		

		Trace(3, "Index FileSheet : #", idxExtFileSheet)


		if (idxExtFileSheet > 0)
		{
			extFileSheet = listExtFileSheets->GetItem(idxExtFileSheet)
		}
		else 
		{
			extFileSheet = CreateSheet( "KnowledgeResources|"+ strAttrValuesDocument )
			listExtFileSheetNames->Append(strAttrValuesDocument)

			listExtFileSheets->Append(extFileSheet)
		}
		if ( extFileSheet <> NULL )
		{

			for idxAttrRow while idxAttrRow < extFileSheet.RowsNb
			{

				strValue = extFileSheet.CellAsString(idxAttrRow, idxAttrValuesCol)
				//Added Code for PI8.1--Starts
				//append descriptions with Value
				strDescription1 = extFileSheet.CellAsString(idxAttrRow, idxAttrDesc1)
							
				if ((strDescription1 <> NULL) AND(strDescription1 <> ""))
				{

					strValue = strValue + " | " + strDescription1
				}
				
				//Added Code for PI8.1--Ends

				listOfAttributeValues->Append(strValue)
				if (ThisObject.HasAttribute(strAttrName))
				{
					if ( ( (ThisObject.GetAttributeString(strAttrName) == "") OR (ThisObject.GetAttributeString(strAttrName) == NULL) ) AND ( "1" == extFileSheet.CellAsString(idxAttrRow, idxAttrDefaultValueCol) ) )
					{
						ThisObject.SetAttributeString(strAttrName, strValue)


					}

				}
				idxAttrRow = idxAttrRow + 1
			}

		}
		Trace(2, "List Auth : #", listOfAttributeValues)
		if (1 >= listOfAttributeValues.Size())
		{
			Trace(3, "Size = 1")

			if (pAttr <> NULL) 
			{
				pAttr.Constant = true
				listDisabledValuePointer->Append(strAttrName)
			}
		}
		else if (2 == listOfAttributeValues.Size()) 
		{	
			if (ThisObject.HasAttribute(strAttrName))
			{

				if ( (ThisObject.GetAttributeString(strAttrName) == "") OR (ThisObject.GetAttributeString(strAttrName) == NULL) OR (ThisObject.GetAttributeString(strAttrName) == listOfAttributeValues.GetItem(1)) ) 


				{
					ThisObject.SetAttributeString(strAttrName, listOfAttributeValues.GetItem(1))
					if (pAttr <> NULL) 
					{
						pAttr.Constant = true
						listDisabledValuePointer->Append(strAttrName)
					}


				}
			}
		}

		else
		{	
			if (pAttr <> NULL) 
			{
				pAttr.Constant = false
				pAttr.AuthorizedValues = listOfAttributeValues

				if(ThisObject.GetAttributeString(strAttrName) <> strCurrentValue)
				{
					ThisObject.SetAttributeString(strAttrName, strCurrentValue)
				}
				Trace(2, "# : #", strAttrName, strCurrentValue)
			}

		}

		idxAttr = idxAttr + 1

	}
	/*End[PI3.4] - Added to manage attributes by BL*/
	
	/* Get Design Status value from Description */

	strAttrDesignStatusValue = ""
	if (ThisObject->HasAttribute(strAttrDesignStatus)) 
	{
	//N2H-21366:Starts
		if(ThisObject->IsASortOf("PLMFst_FlexibleFastenerInstance"))
		{
			Trace(1,"Getting Parent BusinessType")
			Let listThisInstOwnersBundles(List)
			Let listThisInstsBundles(List)
			Let pInstanceStatus(ValuePointer)
			Let pDescription(ValuePointer)
			Let xBundle(VPMReference)
			Let xBusinessType(String)
			Let strStatus(String)
			Let strStage(String)
			listThisInstOwnersBundles->RemoveAll()
			listThisInstsBundles->RemoveAll()
			listThisInstOwnersBundles = ThisObject->Eurodrone_InstanceMethodsLib::VPMInstance_GetAggregatingReference(listThisInstsBundles)
			if(listThisInstOwnersBundles.Size()>0)
			{
				for xBundle inside listThisInstOwnersBundles
				{
					Trace(1,xBundle.PrimaryType.Name)
					
					// START added code N2H-27658
					/*
						All instance atributes should not be editable : If BT “Fastener Definition” is child of BT “Fastener Definition”, 
						then attributes are not editable (properties, Spread sheet editor et Sheet editor)
					*/
					if(xBundle.IsASortOf("PLMFst_FlexibleFastenerReference") AND ThisObject.IsASortOf("PLMFst_FlexibleFastenerInstance"))
					{
						Trace(1, "|--------------- START N2H-27658 >> Secondary Fastener instance attributes not editable ---------------|")
						Trace(1, "N2H-27658 >> Seconadary fastener instance PLM_ExternalID ", ThisObject.PLM_ExternalID)

						for currentSecoFastAttribute inside listSecondaryFastenerAttribute
						{
							if(ThisObject.HasAttribute(currentSecoFastAttribute))
							{
								listDisabledValuePointer.Append(currentSecoFastAttribute)
							}
						}
						Trace(1, "|--------------- END N2H-27658 >> Secondary Fastener instance attributes not editable ---------------|")
					}
					// END added code N2H-27658
					
					xBusinessType=Eurodrone_Util::GetParentBusinessType(xBundle)
					Trace(1,"Business Type of Parent Last>>>>>>",xBusinessType)
					strStatus=ThisObject->GetAttributeString(strAttrDesignStatus)
					strStage=ThisObject->GetAttributeString(strAttrDesignStage)
					Trace(1,"current Status:::",strStatus)
					Trace(1,"current Desin Stage:::",strStage)
					if("EM"==xBusinessType)
					{
					    if(NULL==strStatus OR ""==strStatus OR strAttrDesignStatusValNA==strStatus OR strAttrDesignStatusValWIP==strStatus)
						{
							pInstanceStatus=ThisObject->GetAttributeValuePointer("AIRBUS_E_Instance_EPASSY_InstanceStatus")
							pInstanceStatus.Constant=false
							ThisObject->SetAttributeString("AIRBUS_E_Instance_EPASSY_InstanceStatus",strAttrDesignStatusValWIP)
							pInstanceStatus.Constant=true
						}
						if(ThisObject->HasAttribute("AIRBUS_E_Instance_EPASSY_InstanceDesignStage"))
						{
							if(NULL==strStage OR ""==strStage OR strAttrDesignStageValNA==strStage)
							{
								ThisObject->SetAttributeString("AIRBUS_E_Instance_EPASSY_InstanceDesignStage",strAttrDesignStageValNotYetDefined)
							}
						}
						Trace(1,"Instance Status & Design Stage Value Set for EM")
					}
				} 
			}
		}
		//N2H-21366:Ends
		
		
		strAttrDesignStatusValue = ThisObject->GetAttributeString(strAttrDesignStatus)
		Trace(1,"strAttrDesignStatusValue<<<<<<<<<<<>>>>>>>>>>>",strAttrDesignStatusValue)
	
		
		/* Freeze all attributes of Fixed Instance */
		if ( (strAttrDesignStatusValue <> strAttrDesignStatusValNA) AND (strAttrDesignStatusValue <> strAttrDesignStatusValWIP) AND (strAttrDesignStatusValue <> ""))
		{

			attrLitList = ThisObject->ListAttributeNames("Literal", false) + ThisObject->ListAttributeNames("List", false)

			counter = 1


			For counter while counter <= attrLitList->Size() 
			{
				if ( (attrLitList[counter] <> strAttrDesignStatus) AND (attrLitList[counter] <> "V_IsFixedInstance") AND (attrLitList[counter] <> "AIRBUS_E_ValidationDate_ValidationDate") AND (attrLitList[counter] <> "PLM_ExternalID"))
				{

					pGenericPointer = ThisObject->GetAttributeValuePointer(attrLitList[counter])
					if (pGenericPointer <> NULL)
					{
						pGenericPointer.Constant = true
						listDisabledValuePointer->Append(attrLitList[counter])
					}
				}
				
				//Bug fixing N2H-15356
				if(attrLitList[counter] == "PLM_ExternalID")
				{
					pGenericPointer = ThisObject->GetAttributeValuePointer(attrLitList[counter])
					if (pGenericPointer <> NULL)
					{
						pGenericPointer.Constant = true
					}

				}
				//End bug fixing N2H-15356
			}
		}
	}
	
	/* START - Modification by Hakuna team to block manual promote demote block */

	/* Business Rule Ids : BR00029 and BR00031 */
	Trace(1,"********** Start Business rule to block manual promote demote block ********* ")



	set bPromote = True
	set bDemote = True
	pGenericPointer = ThisObject->GetAttributeValuePointer(strAttrDesignStatus)
	if (ThisObject->HasAttribute("AIRBUS_E_RPTech_DemoteAllowed"))
	{
		bDemote = ThisObject.GetAttributeBoolean("AIRBUS_E_RPTech_DemoteAllowed")
	}
	if (ThisObject->HasAttribute("AIRBUS_E_Instance_EPASSY_InstanceDesignStage"))
	{
		designStageValue = ThisObject.GetAttributeString("AIRBUS_E_Instance_EPASSY_InstanceDesignStage")
		listResultInsts = Eurodrone_InstanceMethodsLib::GetTrueVPMInstance(ThisObject)
		Trace(1,"Count of Instances is #", listResultInsts.Size())
		if (designStageValue == "DFM" OR designStageValue == "Data Drop")
		{
			bPromote = False

		}
		else
		{
			if (listResultInsts->Size() > 1)
			{
				pGenericPointer.Constant = true
				Notify("Instance Maturity cannot be changed as identical Instances detected with the same attribute Values. Please edit the instance attribute value and save, in order to make the selected instance unique")

			}


			else if (listResultInsts->Size() == 1)
			{
				pGenericPointer.Constant =false
				trueInstance = listResultInsts->GetItem(1)
				Trace(1,"trueInstance is # ", trueInstance.Name)
				
				bUnderCha = AA_IsUnderChangeAction(trueInstance)

				Trace(1,"bUnderCha #", bUnderCha)
				
				if (bUnderCha == true)
				{
					bPromote = False
				}
				else if ( (userRole == "VPLMProjectLeader") OR (userRole == "VPLMProjectAdministrator") )
				{

					bPromote = True
				}
				else 

				{
					bPromote = False
				}
			}
			
		}
		// Start N2H-18520: Block instance promotion if instance promote from inwork to frozen and reference maturity state attribute value is in work
		Trace(1,"╔ T00523 N2H-18520 00001 -  Start BLPart block promote Instance to frozen linked at the Reference Status N2H-18520")
		//iFromState = Parameters.GetAttributeString("CurrentState")
		//Trace(1,"║ T00525 N2H-18520 00001 -  iFromState : #",iFromState)
		//set strTransition=ThisObject->GetAttributeValuePointer("AIRBUS_E_Instance_EPASSY_InstanceStatus")
		//Trace(1,"║ T00527 N2H-18520 00002 -  strTransition : #",strTransition)
		strObjInstCurrentStatus = ThisObject.GetAttributeString("AIRBUS_E_Instance_EPASSY_InstanceStatus")
		Trace(1,"║ T00529 N2H-18520 00012 -  ThisObject Current State : #", strObjInstCurrentStatus )
		Trace(1,"║ T00530 N2H-18520 00013 -  ThisObject reference is : #", ThisObject.PrimaryType.Name )

		Trace(1,"║ T00531 N2H-18520 00014 -  ThisObject external Id : #", ThisObject.PLM_ExternalID)
		Trace(1,"║ T00532 N2H-18520 00015 -  ThisObject APN : #", ThisObject.GetAttributeString("AIRBUS_E_Identification_AirbusPartNumber"))
		
		if (ThisObject.IsASortOf("VPMInstance"))
		{
			//refObjChildList = (ThisObject.Children)->Filter("VPMReference","")
			//refObjChildList = childrenList
			Trace(1,"║ T00535 N2H-18520 00003 -  Have Children : #",childrenList->Size())
			set objChildReference = childrenList->GetItem(1)
			Trace(1,"║ T00537 N2H-18520 00004 -  child Object reference is  : #",objChildReference.PrimaryType.Name)
			Trace(1,"║ T00538 N2H-18520 00005 -  child Object reference external Id is : #",objChildReference.PLM_ExternalID)
			Trace(1,"║ T00539 N2H-18520 00011 -  child Object reference APN : #",objChildReference.GetAttributeString("AIRBUS_E_Identification_AirbusPartNumber"))
			strReferenceStatus = objChildReference.current
			Trace(1,"║ T00540 N2H-18520 00006 -  child Object reference status : #",strReferenceStatus)
			
			if (strObjInstCurrentStatus == "In Work")
			{
				Trace(2,"╠ T00544 N2H-18520 00007 -  Promote Instance from In Work to Frozen")
				if (strReferenceStatus == "IN_WORK")
				{
					set instanceStatus = ThisObject->GetAttributeValuePointer("AIRBUS_E_Instance_EPASSY_InstanceStatus")
					if(ThisObject.GetAttributeString("AIRBUS_E_Instance_EPASSY_InstanceStatus") <> "In Work")
					{
						ThisObject.SetAttributeString("AIRBUS_E_Instance_EPASSY_InstanceStatus","In Work")
					}
					instanceStatus.Constant = true
					Trace(3,"╠ T00548 N2H-18520 00008 -  Validation False , Promote Instance from In Work to Frozen not authorized because Reference status is In Work")
					//N2H-19875 correction | Start
					//Notify("Promote to Frozen of Instance Denied Reference status is still InWork")
					//N2H-19875 correction | End
				}
			}
			
			if ( strObjInstCurrentStatus == "Frozen" AND strTransition == "ToRelease")
			{
				Trace(2,"╠ T00555 N2H-18520 00009 -  Promote Instance from Frozen to Release")
				if (strReferenceStatus <> "RELEASED" OR strReferenceStatus <> "Released")
				{
					set instanceStatus = ThisObject->GetAttributeValuePointer("AIRBUS_E_Instance_EPASSY_InstanceStatus")
					instanceStatus.Constant = true
					Trace(3,"╠ T00559 N2H-18520 00010 -  Validation False , Promote Instance from Frozen to Released not authorized because Reference status is different from Released")
					Notify("Promote to Release of Instance Denied Reference status is not Released ")
					//strErrorMsgKey = "PromoteDenied"
				}
			}
		}
		Trace(1,"╚ T00567 N2H-18520 00011 -  End BLPart block promote Instance to frozen linked at the Reference Status N2H-18520")
		// End: N2H-18520
	}

	Trace(1,"********** End Business rule to block manual promote demote block ********* ")
	/* END - Modification by Hakuna team to block manual promote demote block */
	
	let strPrimaryType (String)
	let bElectrical (Boolean)
	bElectrical = false
	strPrimaryType = childNode.PrimaryType.Name
	if(strPrimaryType == "ElectricalGeometry" OR strPrimaryType == "ElectricalBranchGeometry" OR strPrimaryType == "Electrical3DSystem")
	{
		bElectrical = true
	}
	
	/* Design Status Combobox */
	if (pGenericPointer <> NULL AND (listResultInsts->Size() == 1 OR bElectrical == true))
	{
		Trace(1,"strAttrDesignStatusValue :::: #", strAttrDesignStatusValue)
		if ( (strAttrDesignStatusValue == "") OR (strAttrDesignStatusValue == strAttrDesignStatusValNA) )
		{
			listAttrDesignStatusAuthValues->Append("AuthorizedValues")

			listAttrDesignStatusAuthValues->Append(strAttrDesignStatusValNA)
			listAttrDesignStatusAuthValues->Append(strAttrDesignStatusValWIP)
			pGenericPointer.Constant = false
			if (strAttrDesignStatusValue == "")

			{

				ThisObject->SetAttributeString(strAttrDesignStatus, strAttrDesignStatusValNA)
			}
			pGenericPointer.AuthorizedValues = listAttrDesignStatusAuthValues
		}
		else if (strAttrDesignStatusValue == strAttrDesignStatusValWIP)
		{
			listAttrDesignStatusAuthValues->Append("AuthorizedValues")


			listAttrDesignStatusAuthValues->Append(strAttrDesignStatusValNA)

			listAttrDesignStatusAuthValues->Append(strAttrDesignStatusValWIP)
			listAttrDesignStatusAuthValues->Append(strAttrDesignStatusValFrozen)
			pGenericPointer.Constant = false

			pGenericPointer.AuthorizedValues = listAttrDesignStatusAuthValues
		
		}
		else if (strAttrDesignStatusValue == strAttrDesignStatusValFrozen)
		{
			listAttrDesignStatusAuthValues->Append("AuthorizedValues")
			if (designStageValue == "DFM" OR designStageValue == "Data Drop")
			{
				listAttrDesignStatusAuthValues->Append(strAttrDesignStatusValNA)
				listAttrDesignStatusAuthValues->Append(strAttrDesignStatusValWIP)
			}

			else if(bUnderCha == false)
			{
				listAttrDesignStatusAuthValues->Append(strAttrDesignStatusValNA)
				listAttrDesignStatusAuthValues->Append(strAttrDesignStatusValWIP)
			}
			else if(bUnderCha== True AND bDemote == True)


			{

				listAttrDesignStatusAuthValues->Append(strAttrDesignStatusValNA)
				listAttrDesignStatusAuthValues->Append(strAttrDesignStatusValWIP)
			}
			
			listAttrDesignStatusAuthValues->Append(strAttrDesignStatusValFrozen)
			if (bPromote == True)
			{
				listAttrDesignStatusAuthValues->Append(strAttrDesignStatusValReleased)

			}
			pGenericPointer.Constant = false
			pGenericPointer.AuthorizedValues = listAttrDesignStatusAuthValues
		}
		else

		{
			// Added for N2H-26688 :Starts
            strParentBusinessType=Eurodrone_Util::GetParentBusinessType(childNode)
			if(strParentBusinessType <> "Storable Assembly")
			{
			pGenericPointer.Constant = true
			listDisabledValuePointer->Append(strAttrDesignStatus)
            }
			// Added for N2H-26688 :Ends
		}
	}

	
	/* Start - PI8.1: Set NA as default value of Manual Associated Documents attribute */
	Trace(1,"START: ==>> Set NA as default value of Manual Associated Documents attribute <<")

	
	if (ThisObject.HasAttribute("AIRBUS_E_Instance_EPASSY_InstanceManualAssociatedDocument")) {
		set listManualDocuments = ThisObject.GetAttributeObject("AIRBUS_E_Instance_EPASSY_InstanceManualAssociatedDocument")
		
		if (listManualDocuments.Size() == 0) {
			listManualDocuments.Append("NA")

			ThisObject.SetAttributeObject("AIRBUS_E_Instance_EPASSY_InstanceManualAssociatedDocument", listManualDocuments)
		}
	}
	

	Trace(1,"END: ==>> Set NA as default value of Manual Associated Documents attribute <<")
	/* End - PI8.1: Set NA as default value of Manual Associated Documents attribute*/
	
	/* Start - PI8.1: Set NA as default value of PTC attribute */
	Trace(1,"START: ==>> Set NA as default value of PTC attribute <<")
	
	if (ThisObject.HasAttribute("AIRBUS_E_Instance_EPASSY_InstanceProtectiveTreatmentCode")) {
		set listPTCAttributes = ThisObject.GetAttributeObject("AIRBUS_E_Instance_EPASSY_InstanceProtectiveTreatmentCode")
		
		if (listPTCAttributes.Size() == 0) {

			listPTCAttributes.Append("NA")
			ThisObject.SetAttributeObject("AIRBUS_E_Instance_EPASSY_InstanceProtectiveTreatmentCode", listPTCAttributes)

		}

	}

		Trace(1,"END: ==>> Set NA as default value of Manual PTC attribute <<")
	/* End - PI8.1: Set NA as default value of PTC attribute*/

	
	/* Start - PI8.3: Set NA as default value of AITM/AIPS attribute */

	Trace(1,"START: ==>> Set NA as default value of AITM/AIPS attribute <<")
	
	if (ThisObject.HasAttribute("AIRBUS_E_Instance_EPASSY_InstanceAssociatedAITM")) 
	{
		set listAITMAttributes = ThisObject.GetAttributeObject("AIRBUS_E_Instance_EPASSY_InstanceAssociatedAITM")
		
		if (listAITMAttributes.Size() == 0) {
			listAITMAttributes.Append("NA")
			ThisObject.SetAttributeObject("AIRBUS_E_Instance_EPASSY_InstanceAssociatedAITM", listAITMAttributes)
		}

	}

	
	if (ThisObject.HasAttribute("AIRBUS_E_Instance_EPASSY_InstanceAssociatedAIPS")) 
	{
		set listAIPSAttributes = ThisObject.GetAttributeObject("AIRBUS_E_Instance_EPASSY_InstanceAssociatedAIPS")
		
		if (listAIPSAttributes.Size() == 0) {
			listAIPSAttributes.Append("NA")


			ThisObject.SetAttributeObject("AIRBUS_E_Instance_EPASSY_InstanceAssociatedAIPS", listAIPSAttributes)
		}

	}
	Trace(1,"END: ==>> Set NA as default value of Manual AITM/AIPS attribute <<")

	/* End - PI8.3: Set NA as default value of AITM/AIPS attribute*/

	
	listDisabledValuePointer->Append("AIRBUS_E_Instance_EPASSY_InstanceReplaceBy")
	
	
	//Start N2H-18564 - [ADS] Block and Checks during Promote FTA part
	if(NULL <> childNode AND  "AIRBUS_E_VPMReference_LowerLevel"==childNode.PrimaryType.Name)
	{
		if childNode.HasAttribute("AIRBUS_E_BusinessType_BusinessType") and childNode.GetAttributeString("AIRBUS_E_BusinessType_BusinessType") == "FTA"
		{
			Trace (1, "CurrentReference: ", childNode.PLM_ExternalID)
			if ThisObject.HasAttribute("AIRBUS_E_Instance_EPASSY_InstanceDesignStage") and (ThisObject.GetAttributeString("AIRBUS_E_Instance_EPASSY_InstanceDesignStage") == "DFM" or ThisObject.GetAttributeString("AIRBUS_E_Instance_EPASSY_InstanceDesignStage") == "Data Drop")
			{
				if ThisObject.HasAttribute("AIRBUS_E_Instance_EPASSY_InstanceStatus")
				{					
					listThisInstOwners->RemoveAll()
					listThisInsts->RemoveAll()

					listThisInstOwners = ThisObject->Eurodrone_InstanceMethodsLib::VPMInstance_GetAggregatingReference(listThisInsts)
					if listThisInstOwners.Size() <> 0
					{
						let parentRef (VPMReference)
						parentRef = listThisInstOwners.GetItem(1)
						Trace (1, "parentRef: ", parentRef.PLM_ExternalID)
						
						if ( parentRef->IsASortOf("AIRBUS_E_VPMReference_EngineeringUpperLevel")
						AND parentRef->HasAttribute("AIRBUS_E_BusinessType_BusinessType")
						AND parentRef->GetAttributeString("AIRBUS_E_BusinessType_BusinessType") == "EM" )
						{
							set instanceStatus = ThisObject->GetAttributeValuePointer("AIRBUS_E_Instance_EPASSY_InstanceStatus")
							instanceStatus.Constant = true
						}
					}
				}
			}
		}
	}			
	//End N2H-18564 - [ADS] Block and Checks during Promote FTA part
    /* START Story N2H-25129|Manual Promotion/Demotion of the instances when the FTA is frozen with a quality report linked to it */
	if(NULL <> childrenList
	AND childrenList->Size() > 0
	)
	{
		Trace (1, "T00001 N2H-25129 00933 childrenList is not NULL")
	
		Let oObjecRef (VPMReference)
		set oObjecRef = childrenList->GetItem(1)
		
		Let iFTADFMDataDropCount (Integer)
		Let iFTADFMWIPDataDropCount (Integer)
		iFTADFMDataDropCount = 0
		iFTADFMWIPDataDropCount = 0
				
		if( "AIRBUS_E_VPMReference_LowerLevel" == oObjecRef.PrimaryType.Name /*If the childNode object is of type "AIRBUS_E_VPMReference_LowerLevel"*/
		AND oObjecRef.HasAttribute("AIRBUS_E_BusinessType_BusinessType")
		AND oObjecRef.GetAttributeString("AIRBUS_E_BusinessType_BusinessType") <> "FTA" )
		{
			Trace (1, "T00002 N2H-25129 00947 Object Reference is of Type : AIRBUS_E_VPMReference_LowerLevel and has attribute AIRBUS_E_BusinessType_BusinessType <> FTA ")	
		
			if( ThisObject.HasAttribute("AIRBUS_E_Instance_EPASSY_InstanceDesignStage") 
			AND (ThisObject.GetAttributeString("AIRBUS_E_Instance_EPASSY_InstanceDesignStage") == "DFM" 
				OR ThisObject.GetAttributeString("AIRBUS_E_Instance_EPASSY_InstanceDesignStage") == "Data Drop"
			))
			{
				Trace (1, "T00003 N2H-25129 00954 Object has attribute AIRBUS_E_Instance_EPASSY_InstanceDesignStage =DFM or =Data Drop and has Owner <> NULL")	
				
				listThisInstOwners->RemoveAll()
				listThisInsts->RemoveAll()

				listThisInstOwners = ThisObject->Eurodrone_InstanceMethodsLib::VPMInstance_GetAggregatingReference(listThisInsts)
				
				Let oParentRef (VPMReference)

				if (listThisInstOwners.Size() <> 0)
				{
					oParentRef = listThisInstOwners.GetItem(1)
				}
				if(oParentRef == NULL)
				{
					Trace (1, "T00004 N2H-25129 00969 Parent object is NULL")	
				}
				
				if(	oParentRef <> NULL
				AND oParentRef.Children <> NULL
				AND oParentRef.HasAttribute("AIRBUS_E_BusinessType_BusinessType")
				AND oParentRef.GetAttributeString("AIRBUS_E_BusinessType_BusinessType") == "EM")
				{	
					Trace (1, "T00005 N2H-25129 00977 Parent object is not NULL AND has attribute AIRBUS_E_BusinessType_BusinessType =EM")	
		
					Let oChildInst (VPMInstance)
					Let oChildRef (VPMReference)

					for oChildInst inside oParentRef.Children
					{	
						Trace (1, "T00006 N2H-25129 00984 Parent object has Children")	
		
						if (oChildInst.Reference <> NULL /* Reference of oChildInst exist */)
						{	
							Trace (1, "T00007 N2H-25129 00988 Child object has Reference")	
		
							oChildRef = oChildInst.Reference 
							
							if(oChildRef->HasAttribute("AIRBUS_E_BusinessType_BusinessType")/* If Reference has attribute AIRBUS_E_BusinessType_BusinessType */
							AND oChildRef->GetAttributeString("AIRBUS_E_BusinessType_BusinessType") == "FTA" /* If Instance has an "FTA" value in attribute AIRBUS_E_BusinessType_BusinessType */
							AND (oChildInst.GetAttributeString("AIRBUS_E_Instance_EPASSY_InstanceDesignStage") == "DFM" 
								OR oChildInst.GetAttributeString("AIRBUS_E_Instance_EPASSY_InstanceDesignStage") == "Data Drop"
								)
							)
							{
								Trace (1, "T00008 N2H-25129 00999 Child object has attribute AIRBUS_E_BusinessType_BusinessType AND =FTA")	
								
								iFTADFMDataDropCount = iFTADFMDataDropCount + 1
								
								if(oChildInst->HasAttribute("AIRBUS_E_Instance_EPASSY_InstanceStatus")/* Test instance attribute AIRBUS_E_Instance_EPASSY_InstanceStatus exist */
								AND oChildInst->GetAttributeString("AIRBUS_E_Instance_EPASSY_InstanceStatus") == "In Work"/* Test instance attribute AIRBUS_E_Instance_EPASSY_InstanceStatus value is In Work */)
								{
									Trace (1, "T00009 N2H-25129 01006 Child object has attribute AIRBUS_E_Instance_EPASSY_InstanceStatus AND =In Work")	
		
									iFTADFMWIPDataDropCount = iFTADFMWIPDataDropCount + 1
								}
							}
						}
					}
				}
				
				Let pInstanceStatus (ValuePointer)
				
				if(
				(iFTADFMWIPDataDropCount > 0
				OR iFTADFMDataDropCount == 0 
				)
				AND ThisObject.HasAttribute("AIRBUS_E_Instance_EPASSY_InstanceStatus"))
				{
					Trace (1, "T00010 N2H-25129 01023 At least one object of BT FTA is In Work")	
					pInstanceStatus = ThisObject.GetAttributeValuePointer("AIRBUS_E_Instance_EPASSY_InstanceStatus")
					if( NULL <> pInstanceStatus)
					{
						pInstanceStatus.Constant = false
					}
				}
				else if(iFTADFMWIPDataDropCount == 0 
				AND iFTADFMDataDropCount > 0
				AND ThisObject.HasAttribute("AIRBUS_E_Instance_EPASSY_InstanceStatus"))
				{	
					Trace (1, "T00011 N2H-25129 01034 None object of BT FTA is In Work")	
					pInstanceStatus = ThisObject.GetAttributeValuePointer("AIRBUS_E_Instance_EPASSY_InstanceStatus")
					if( NULL <> pInstanceStatus)
					{
						pInstanceStatus.Constant = true
					}
				}
			}
			
			if(ThisObject.HasAttribute("AIRBUS_E_Instance_EPASSY_InstanceStatus"))			
			{
				Trace (1, "T00012 N2H-25129 01045 AIRBUS_E_Instance_EPASSY_InstanceStatus attribute value is : #", ThisObject.GetAttributeString("AIRBUS_E_Instance_EPASSY_InstanceStatus"))	
			}
		}
		else
		{
			Trace (1, "T00013 N2H-25129 01050 Object Reference is NOT of Type : AIRBUS_E_VPMReference_LowerLevel OR has attribute AIRBUS_E_BusinessType_BusinessType <> EP ")	
		}
	}
	else
	{
		if(NULL == childrenList)
		{
			Trace (1, "T00014 N2H-25129 01057 childrenList is NULL")
		}
		if(NULL <> childrenList
		AND childrenList->Size() == 0)
		{
			Trace (1, "T00015 N2H-25129 01062 childrenList Size is 0")
		}
	}	
	/* END Story N2H-25129|Manual Promotion/Demotion of the instances when the FTA is frozen with a quality report linked to it */
}
else  /* Valuation Mode */
{
	strEditAttributeId = Parameters->GetAttributeString("EditAttributeId")
	Trace(1, "======> strEditAttributeId: ", strEditAttributeId)

	let pValidationDate(Pointer)
	pValidationDate = ThisObject->GetAttributeValuePointer("AIRBUS_E_ValidationDate_ValidationDate")
	if( strEditAttributeId == strAttrDesignStatus )
	{
		
		strAttrDesignStatusValue = ""


		if (ThisObject->HasAttribute(strAttrDesignStatus)) 
		{
			strAttrDesignStatusValue = ThisObject->GetAttributeString(strAttrDesignStatus)

			Trace(1,"strAttrDesignStatusValue #", strAttrDesignStatusValue)

			
		}
		if (strAttrDesignStatusValue == strAttrDesignStatusValNA)
		{



			bAllowDesignStatusValNA = false
				listThisInstOwners->RemoveAll()



				listThisInsts->RemoveAll()
			listThisInstOwners = ThisObject->Eurodrone_InstanceMethodsLib::VPMInstance_GetAggregatingReference(listThisInsts)
			if (listThisInstOwners->Size() == 0)
			{

				bAllowDesignStatusValNA = true
			}
			else
			{
				for objThisInstOwner inside listThisInstOwners
				{
					if ( not(objThisInstOwner->IsASortOf("AIRBUS_E_VPMReference_EngineeringUpperLevel"))
						OR not(objThisInstOwner->HasAttribute("AIRBUS_E_BusinessType_BusinessType"))
						OR objThisInstOwner->GetAttributeString("AIRBUS_E_BusinessType_BusinessType") <> "EM" )
					{
						bAllowDesignStatusValNA = true
						break
					}
				}
			}
			if (not(bAllowDesignStatusValNA))

			{

				strAttrDesignStatusValue = strAttrDesignStatusValWIP
				pGenericPointer = ThisObject->GetAttributeValuePointer(strAttrDesignStatus)
				if (pGenericPointer <> NULL)
				{
					listAttrDesignStatusAuthValues = pGenericPointer.AuthorizedValues
					indexDSValues = 1

					for indexDSValues while indexDSValues <= listAttrDesignStatusAuthValues.Size()
					{
						if(listAttrDesignStatusAuthValues.GetItem(indexDSValues) == strAttrDesignStatusValNA)
						{

							listAttrDesignStatusAuthValues->RemoveItem(indexDSValues)
						}
					}

					pGenericPointer.AuthorizedValues = listAttrDesignStatusAuthValues

				}
				ThisObject->SetAttributeString(strAttrDesignStatus, strAttrDesignStatusValue)
				Notify ("WARNING: '#' Instance Status not allowed under EM Upper Level Reference. Instance Status automatically set to '#'", strAttrDesignStatusValNA, strAttrDesignStatusValue)


			}
		}
		
		if (ThisObject->HasAttribute("V_IsFixedInstance"))
		{

			if ( (strAttrDesignStatusValue == "") OR (strAttrDesignStatusValue == strAttrDesignStatusValNA) OR (strAttrDesignStatusValue == strAttrDesignStatusValWIP) )
			{
				ThisObject->SetAttributeBoolean("V_IsFixedInstance", false)
			}

			else

			{
				ThisObject->SetAttributeBoolean("V_IsFixedInstance", true)

			}
		}
	}

	//Added Code for PI8.1--Starts
	extFileSheet = CreateSheet("KnowledgeResources|" + strAttributesValuesDocumentName)
	if (extFileSheet <> NULL) 
	{
		for idxAttrsRow while idxAttrsRow < extFileSheet.RowsNb
		{

			strAttrName = extFileSheet.CellAsString(idxAttrsRow, idxAttrsNamesCol)
			strIsShowDescription = extFileSheet.CellAsString(idxAttrsRow, idxAttrShowDescriptionCol)
			strIsMultiValue = extFileSheet.CellAsString(idxAttrsRow, idxAttrMultiValueCol)

			if ((NULL <> strIsShowDescription) AND("" <> strIsShowDescription) AND("1" == strIsShowDescription))



				
			{
				if ((NULL <> strAttrName) AND("" <> strAttrName) AND(strEditAttributeId == strAttrName))

				
				{

					if (ThisObject.HasAttribute(strEditAttributeId)) {
						if ((NULL <> strIsMultiValue) AND("" <> strIsMultiValue) AND("1" == strIsMultiValue))
						{
							set listEditAttrValues = ThisObject.GetAttributeObject(strEditAttributeId) 
						}
						else
						{

							strEditAttrValue = ThisObject.GetAttributeString(strEditAttributeId)

							Trace(1, "strEditAttrValue  >> " + strEditAttrValue)
						}
						if ((strEditAttrValue <> NULL) AND(strEditAttrValue <> ""))
						{
							strEditAttrValue = strEditAttrValue.Extract(0, (strEditAttrValue -> Search(" | ")))
							Trace(1, "Extracted string value >>>> " + strEditAttrValue + ">>>>")

							ThisObject.SetAttributeString(strEditAttributeId, strEditAttrValue)
						}
						if ((listEditAttrValues <> NULL) AND(listEditAttrValues.Size() > 0))
						{
							idxEditAttrValue = 1

							for idxEditAttrValue while idxEditAttrValue <= listEditAttrValues->Size()
							{

								strTempAttr = listEditAttrValues->GetItem(idxEditAttrValue)

								Trace(1, "strTempAttr >>>> " + strTempAttr)
								idxPipeSeparator = strTempAttr -> Search(" | ")

								if ((-1 <> idxPipeSeparator))
								{
									strTempAttr = strTempAttr.Extract(0, idxPipeSeparator)
									Trace(1, "Extracted string value >>>> " + strTempAttr + ">>>>")

								}
								listEditAttrValues->SetItem(strTempAttr, idxEditAttrValue)

							}
							ThisObject.SetAttributeObject(strEditAttributeId, listEditAttrValues)
						}
					}
				}
			}


			idxAttrsRow = idxAttrsRow + 1
		}
	}

	//Added Code for PI8.1--Ends
	
	/* START - Modification by Hakuna team to block manual promote demote block */

	/* Business Rule Ids : BR00029 and BR00031 */

	Trace(1,"********** Start Business rule to block manual promote demote block ********* ")
	/*if (ThisObject->HasAttribute("AIRBUS_E_Instance_EPASSY_InstanceDesignStage"))
	{

		if (strEditAttributeId == "AIRBUS_E_Instance_EPASSY_InstanceDesignStage")
		{
			designStage = ThisObject.GetAttributeString("AIRBUS_E_Instance_EPASSY_InstanceDesignStage")

			
			if (designStage <> "DFM" OR designStage <> "Data Drop")
			{
				listResultInsts = Eurodrone_InstanceMethodsLib::GetTrueVPMInstance(ThisObject)
				Trace(1,"Count of Instances is #", listResultInsts.Size())
				if (listResultInsts->Size() > 1)

				{
					pGenericPointer.Constant = true
					Notify("Identical Instances detected.Instance Maturity cannot be changed")
				}
				else if (listResultInsts->Size() == 1)
				{
					pGenericPointer.Constant =false
					trueInstance = listResultInsts->GetItem(1)
					Trace(1,"trueInstance is # ", trueInstance.Name)

					bUnderCha = AA_IsUnderChangeAction(trueInstance)
					if (bUnderCha == true)
					{
						ThisObject.SetAttributeBoolean("AIRBUS_E_RPTech_PromoteAllowed", False)
					}
					else if ( (userRole == "VPLMProjectLeader") OR (userRole == "VPLMProjectAdministrator") )
					{
						ThisObject.SetAttributeBoolean("AIRBUS_E_RPTech_PromoteAllowed", True)
					}
				}
			}



		}
	}*/
	Trace(1,"********** End Business rule to block manual promote demote block ********* ")
	/* END - Modification by Hakuna team to block manual promote demote block */
	

	/* Start - PI8.1: Set NA as default value of Manual Associated Documents attribute */
	Trace(1,"START: ==>> Set NA as default value of Manual Associated Documents attribute <<")
	
	if (ThisObject.HasAttribute("AIRBUS_E_Instance_EPASSY_InstanceManualAssociatedDocument"))
	{
		set listManualDocuments = ThisObject.GetAttributeObject("AIRBUS_E_Instance_EPASSY_InstanceManualAssociatedDocument")

		if (listManualDocuments.Size() == 0) 
		{
			listManualDocuments.Append("NA")
			ThisObject.SetAttributeObject("AIRBUS_E_Instance_EPASSY_InstanceManualAssociatedDocument", listManualDocuments)
		}
	}
	Trace(1,"END: ==>> Set NA as default value of Manual Associated Documents attribute <<")
	/* End - PI8.1: Set NA as default value of Manual Associated Documents attribute*/

	
	listDisabledValuePointer->Append("AIRBUS_E_Instance_EPASSY_InstanceReplaceBy")
}

/* Specific code for PLMFst_FlexibleFastenerInstance */
if (ThisObject->IsASortOf("PLMFst_FlexibleFastenerInstance"))
{
	/* Rule created by LNQ 5/31/2018 */
	let rscFSTSheetName (String)


	let rscFSTSheet (DTSheetType)
	let listEnabledValuePointer (List)

	let listResetToDefaultValuePointer (List)
	let listEmptyList (List)


	rscFSTSheetName = "KnowledgeResources|Eurodrone_FST_StringResource"
	rscFSTSheet = CreateSheet(rscFSTSheetName)
	if (rscFSTSheet == NULL)
		Message("Incorrect NIS FST String Resource Sheet Path")


	/* Variables to set for combobox */

	let extAttrValuesFileSheet(DTSheetType)
	strAttributesValuesDocumentName = "Eurodrone_FST_INSTANCE_ATTRIBUTES_VALUES"

	extAttrValuesFileSheet = CreateSheet( "KnowledgeResources|"+ strAttributesValuesDocumentName )

	/* Global variables */
	let blName (String)

	blName = "SpotInstance_PLMAttributesPropagation"



	/* DO NOT MODIFY BELOW ! */



	/* Used for Recuperation de la Ref */

	let listThisFSTInstRefs (List)

	let listThisFSTInsts (List)
	let objThisFSTInstRef (SpotFastenerAssy)
	let strFSTAttrTypeValueSTUDY (String)
	let strFSTAttrTypeValueDFM (String)

	let strFSTAttrTypeValueDef (String)
	let strFSTAttrTypeValueFstSpecificStacking (String)


	let strFSTInstRefBusinessType (String)
	let realFSTInstRefDiameter (Real)
	let strFSTInstRefFSTType (String)
	let strFSTInstRefFSTTypeList (List)

	/* Installation Orientation */




	
	let strFSTExtSTUDYInstHeadSide (String)
	let strFSTExtDFMInstHeadSide (String)

	/* Installation Information */
	let strInstallationAttrName (String)

	let strInstallationPTCodeAttrName (String)
	let listIIAttrValue (List)


	/* Overcoating Information */
	let strOvercoatingAttrName (String)
	let strOvercoatingBothAttrName (String)
	let strOvercoatingHeadAttrName (String)
	let strOvercoatingTailAttrName (String)

	let listOvercoatingBothSideValues (List)
	let bOvercoatingBothSideNotEmpty (Boolean)
	let listOvercoatingHeadSideValues (List)
	let listOvercoatingTailSideValues (List)
	let listOvercoatingHeadTailSideValues (List)

	let bOvercoatingHeadTailSideNotEmpty (Boolean)
	let idxOvercoatingSides (Integer)

	/* Drilling Operation */
	let strFSTExtSTUDYInstDrillingOperationPrefix (String)
	let strFSTExtSTUDYInstDrillingOperationAbsHeadType (String)
	let strFSTExtSTUDYInstDrillingOperationAbsHoleTC (String)
	let strFSTExtSTUDYInstDrillingOperationAbsSpot (String)
	let strFSTExtSTUDYInstDrillingOperationAbsOversize (String)
	let strFSTExtSTUDYInstDrillingOperationNsaMaterial (String)
	let strFSTExtSTUDYInstDrillingOperationNsaTableSel (String)

	let strFSTExtSTUDYInstDrillingOperationConcat (String)
	let strFSTExtDFMInstDrillingOperationPrefix (String)
	let strFSTExtDFMInstDrillingOperationAbsHeadType (String)
	let strFSTExtDFMInstDrillingOperationAbsHoleTC (String)

	let strFSTExtDFMInstDrillingOperationAbsSpot (String)

	let strFSTExtDFMInstDrillingOperationAbsOversize (String)
	let strFSTExtDFMInstDrillingOperationNsaMaterial (String)

	let strFSTExtDFMInstDrillingOperationNsaTableSel (String)

	let strFSTExtDFMInstDrillingOperationConcat (String)
	let strFSTExtSTUDYRefDiameter (String)
	let strFSTExtDFMRefFSTType (String)

	let strFSTExtDFMInstDrillingOperationConcatValue (String)
	let listDOControllingAttr (List)
	let intDOControllingAttrCounter (Integer)
	let strDOControllingAttrDefaultValue (Integer)

	/* Bonding Information */
	let strFSTExtDFMInstBonding (String)
	let strFSTExtDFMInstBondingProcessCodeBothSide (String)
	let strFSTExtDFMInstBondingPTBothSide (String)
	let strFSTExtDFMInstBondingPCMBothSideV1 (String)

	let strFSTExtDFMInstBondingPCMBothSideV2 (String)
	let strFSTExtDFMInstBondingPCMBothSideV3 (String)
	let strFSTExtDFMInstBondingPCMBothSideConcat (String)
	let strFSTExtDFMInstBondingPCMBothSideConcatValue (String)
	let strFSTExtDFMInstBondingProcessCodeHeadSide (String)
	let strFSTExtDFMInstBondingPTHeadSide (String)
	let strFSTExtDFMInstBondingPCMHeadSideV1 (String)
	let strFSTExtDFMInstBondingPCMHeadSideV2 (String)

	let strFSTExtDFMInstBondingPCMHeadSideV3 (String)
	let strFSTExtDFMInstBondingPCMHeadSideConcat (String)

	let strFSTExtDFMInstBondingPCMHeadSideConcatValue (String)

	let strFSTExtDFMInstBondingProcessCodeTailSide (String)
	let strFSTExtDFMInstBondingPTTailSide (String)


	let strFSTExtDFMInstBondingPCMTailSideV1 (String)
	let strFSTExtDFMInstBondingPCMTailSideV2 (String)
	let strFSTExtDFMInstBondingPCMTailSideV3 (String)
	let strFSTExtDFMInstBondingPCMTailSideConcat (String)
	let strFSTExtDFMInstBondingPCMTailSideConcatValue (String)
	let listBIAttrValue (List)
	let intBIAttrValueCounter (Integer)
	let boolBIEmptyList (Boolean)

	let listBIControllingAttr (List)
	let intBIControllingAttrCounter (Integer)


	/* Cleaning Stripping */
	let strCleaningStrippingAttrName (String)
	let strCleaningStrippingBothAttrName (String)
	let strCleaningStrippingHeadAttrName (String)
	let strCleaningStrippingTailAttrName (String)


	/* Torque */
	let strFSTExtDFMInstTorqueValue (String)
	let strFSTExtDFMInstTorqueSpecificValueNominal (String)
	let realFSTExtDFMInstTorqueSpecificValueNominalValue (Real)

	let strFSTExtDFMInstTorqueSpecificValueNominalValue (String)
	let strFSTExtDFMInstTorqueSpecificValueTol (String)

	let realFSTExtDFMInstTorqueSpecificValueTolValue (Real)
	let strFSTExtDFMInstTorqueSpecificValueTolValue (String)
	let strFSTExtDFMInstTorqueSpecificValueConcat (String)
	let strFSTExtDFMInstTorqueSpecificValueConcatValue (String)

	/* Study Fastener Information */

	let strFSTExtSTUDYInstFSTType (String)

	let strFSTExtSTUDYInstScrewFamily (String)
	let strFSTExtSTUDYWashScew (String)
	let strFSTExtSTUDYWashNut (String)
	let strFSTExtSTUDYNutFamily (String)

	let strFSTExtSTUDYInstDrillingOperationConcatValue (String)

	/* Attributes controlling other attributes enable/disable */
	let strFSTExtDFMInstControllingAttr (String)

	let listFSTExtDFMInstControllingAttr (List)
	let intControllingAttr (Integer)
	let strControllingAttr (String)
	let listControllingAttr (List)
	let intControllingAttrCounter (Integer)



	let idxAttrsComboboxTypeCol (Integer)
	let idxAttrsShowDescriptionCol (Integer)
	let idxAttrsMultiValueCol (Integer)
	let strAttrComboboxType (String)
	let strAttrShowDescription (String)
	let strAttrMultiValue (String)


	
	let list_AttrComboboxTypesfor_Combobox (List)
	let list_AttrShowDescriptionsfor_Combobox (List)
	let list_AttrMultiValuesfor_Combobox (List)

	idxAttrsNamesCol = 1


	idxAttrsValuesDocumentCol = 2
	idxAttrsComboboxTypeCol = 3
	idxAttrsShowDescriptionCol = 5
	idxAttrsMultiValueCol = 6
	list_Attributesfor_Combobox->RemoveAll()
	list_AttrValuesDocumentsfor_Combobox->RemoveAll()
	list_ListValuefor_Attr->RemoveAll()

	/* Combobox for Dependency Attributes */

	let strDepAttrName (String)

	let strDepAttrValue (String)
	let list_DependingAttributes (List)




	let list_DepAttributesfor_Combobox (List)
	let list_DepAttrValuesDocumentsfor_Combobox (List)
	let list_DepAttrComboboxTypesfor_Combobox (List)

	let list_DepAttrShowDescriptionsfor_Combobox (List)
	let list_DepAttrMultiValuesfor_Combobox (List)
	
	let bonding (Boolean)

	let cleanningStripping (Boolean)
	let installCondition (String)
	let aipsValues (List)
	let indexAips (Integer)
	let itemAIPS (String)

	if ( Parameters->GetAttributeString("PropagationMode") == "Edition") /* Edition Mode */

	{

		Trace(1,"> BL # on / Edition Mode : [#] ", blName, ThisObject.PLM_ExternalID)

		/* Recuperation de la Ref Business Type */
		let strFSTAttrType (String)
		

		strFSTAttrType = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_ATTR_BUSINESSTYPE"), 2)
		strFSTAttrTypeValueSTUDY = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_ATTR_BUSINESSTYPE_VALUE_STUDY"), 2)
		strFSTAttrTypeValueDFM = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_ATTR_BUSINESSTYPE_VALUE_DFM"), 2)
		strFSTAttrTypeValueDef = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_ATTR_BUSINESSTYPE_VALUE_Def"), 2)
		strFSTAttrTypeValueFstSpecificStacking = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_ATTR_BUSINESSTYPE_VALUE_FASTENER_SPECIFIC_STACKING"), 2)
		
		strFSTInstRefBusinessType = ""
		listThisFSTInstRefs->RemoveAll()
		listThisFSTInsts->RemoveAll()

		listThisFSTInstRefs = ThisObject->Eurodrone_InstanceMethodsLib::VPMInstance_GetReference(listThisFSTInsts)
		if (listThisFSTInstRefs->Size() == 0)

		{
			Notify ("Unable to retrieve Reference for Instance #.", ThisObject.PLM_ExternalID)

		}

		else
		{
			for objThisFSTInstRef inside listThisFSTInstRefs
			{
				if (strFSTInstRefBusinessType == "")
				{
					strFSTInstRefBusinessType = objThisFSTInstRef->GetAttributeString(strFSTAttrType)

				}
				else if (strFSTInstRefBusinessType <> objThisFSTInstRef->GetAttributeString(strFSTAttrType))
				{
					strFSTInstRefBusinessType = ""
					Notify ("Reference Business Type not unique for Instance #. Please check Instance Title unicity.", ThisObject.PLM_ExternalID)
					break
				}
			}
		}
		//Notify ("Reference Business Type is #.", strFSTInstRefBusinessType)

		/* Installation Orientation */

		if (strFSTInstRefBusinessType <> strFSTAttrTypeValueDef AND strFSTInstRefBusinessType <> strFSTAttrTypeValueDFM AND strFSTInstRefBusinessType <> strFSTAttrTypeValueFstSpecificStacking)
		{
			strFSTExtDFMInstHeadSide = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_HEADSIDE"), 2)
			listDisabledValuePointer->Append(strFSTExtDFMInstHeadSide)
		}
		if (strFSTInstRefBusinessType <> strFSTAttrTypeValueSTUDY)


		{
			strFSTExtSTUDYInstHeadSide = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_HEADSIDE"), 2)
			listDisabledValuePointer->Append(strFSTExtSTUDYInstHeadSide)
		}
		
		/* Installation Information */
		strInstallationAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_INSTALLATION"), 2)
		strInstallationPTCodeAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_INSTALLATIONPTCODE"), 2)
		
		if (strFSTInstRefBusinessType <> strFSTAttrTypeValueDef AND strFSTInstRefBusinessType <> strFSTAttrTypeValueDFM  AND strFSTInstRefBusinessType <> strFSTAttrTypeValueFstSpecificStacking)
		{
			listDisabledValuePointer->Append(strInstallationAttrName)

			listDisabledValuePointer->Append(strInstallationPTCodeAttrName)
		}
		else
		{

			if((ThisObject->GetAttributeString(strInstallationAttrName) == "") OR (ThisObject->GetAttributeString(strInstallationAttrName) == "DRY"))
			{
				Trace(1,"Installation Condition - #", ThisObject->GetAttributeString(strInstallationAttrName))
				Trace(1,"Set Protective Treatment Code to NA")	
				
				listIIAttrValue = ThisObject->GetAttributeObject(strInstallationPTCodeAttrName)
				listIIAttrValue->RemoveAll()
				listIIAttrValue->Append("NA")
				ThisObject->SetAttributeObject(strInstallationPTCodeAttrName, listIIAttrValue)


			}
		}

		
		/* Overcoating Information */
		strOvercoatingAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_OVERCOATING"), 2)

		strOvercoatingBothAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_OVERCOATINGBOTHSIDE"), 2)

		strOvercoatingHeadAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_OVERCOATINGHEADSIDE"), 2)
		strOvercoatingTailAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_OVERCOATINGTAILSIDE"), 2)

		
		if (strFSTInstRefBusinessType <> strFSTAttrTypeValueDef AND strFSTInstRefBusinessType <> strFSTAttrTypeValueDFM  AND strFSTInstRefBusinessType <> strFSTAttrTypeValueFstSpecificStacking)

		{			
			listDisabledValuePointer->Append(strOvercoatingAttrName)
			listDisabledValuePointer->Append(strOvercoatingBothAttrName)

			listDisabledValuePointer->Append(strOvercoatingHeadAttrName)
			listDisabledValuePointer->Append(strOvercoatingTailAttrName)

		}
		else
		{

			let listOSAttrValue (List)
					Trace(5, "Got there")


			// Overcoating true / false
			if (not(ThisObject->GetAttributeBoolean(strOvercoatingAttrName)))
			{
									Trace(5, "Got here")
				pGenericPointer = ThisObject->GetAttributeValuePointer(strOvercoatingBothAttrName)
				listDisabledValuePointer->Append(strOvercoatingBothAttrName)
				listDisabledValuePointer->Append(strOvercoatingHeadAttrName)


				listDisabledValuePointer->Append(strOvercoatingTailAttrName)
				if ( pGenericPointer <> NULL )
				{

					pGenericPointer.Constant = false

					listOSAttrValue = ThisObject->GetAttributeObject(strOvercoatingBothAttrName)
					listOSAttrValue->RemoveAll()
					listOSAttrValue->Append("NA")

					ThisObject->SetAttributeObject(strOvercoatingBothAttrName, listOSAttrValue)
				}
				pGenericPointer = ThisObject->GetAttributeValuePointer(strOvercoatingHeadAttrName)
				if ( pGenericPointer <> NULL )

				{
					pGenericPointer.Constant = false

					listOSAttrValue = ThisObject->GetAttributeObject(strOvercoatingHeadAttrName)
					listOSAttrValue->RemoveAll()
					listOSAttrValue->Append("NA")

					ThisObject->SetAttributeObject(strOvercoatingHeadAttrName, listOSAttrValue)


				}
				pGenericPointer = ThisObject->GetAttributeValuePointer(strOvercoatingTailAttrName)
				if ( pGenericPointer <> NULL )
				{
					pGenericPointer.Constant = false

					listOSAttrValue = ThisObject->GetAttributeObject(strOvercoatingTailAttrName)

					listOSAttrValue->RemoveAll()
					listOSAttrValue->Append("NA")
					ThisObject->SetAttributeObject(strOvercoatingTailAttrName, listOSAttrValue)		
				}
			}
			else
			{
				bOvercoatingBothSideNotEmpty = false
				if (ThisObject->HasAttribute(strOvercoatingBothAttrName))

				{
					set listOvercoatingBothSideValues = ThisObject->GetAttributeObject(strOvercoatingBothAttrName)
					idxOvercoatingSides = 1
					for idxOvercoatingSides while idxOvercoatingSides <= listOvercoatingBothSideValues->Size()
					{
						if ( ("" <> listOvercoatingBothSideValues->GetItem(idxOvercoatingSides)) AND ("NA" <> listOvercoatingBothSideValues->GetItem(idxOvercoatingSides)) )
						{



							bOvercoatingBothSideNotEmpty = true
						}

					}


				}
				if (bOvercoatingBothSideNotEmpty)
				{
					listDisabledValuePointer->Append(strOvercoatingHeadAttrName)

					listDisabledValuePointer->Append(strOvercoatingTailAttrName)

					
					listOSAttrValue->RemoveAll()
					listOSAttrValue->Append("NA")
					ThisObject->SetAttributeObject(strOvercoatingHeadAttrName, listOSAttrValue)

					ThisObject->SetAttributeObject(strOvercoatingTailAttrName, listOSAttrValue)
				}
				else 
				{
					bOvercoatingHeadTailSideNotEmpty = false
					if ( (ThisObject->HasAttribute(strOvercoatingHeadAttrName)) AND (ThisObject->HasAttribute(strOvercoatingTailAttrName)) )
					{
						set listOvercoatingHeadSideValues = ThisObject->GetAttributeObject(strOvercoatingHeadAttrName)

						set listOvercoatingTailSideValues = ThisObject->GetAttributeObject(strOvercoatingTailAttrName)
						listOvercoatingHeadTailSideValues = listOvercoatingHeadSideValues + listOvercoatingTailSideValues



						idxOvercoatingSides = 1
						for idxOvercoatingSides while idxOvercoatingSides <= listOvercoatingHeadTailSideValues->Size()
						{

							if ( ("" <> listOvercoatingHeadTailSideValues->GetItem(idxOvercoatingSides)) AND ("NA" <> listOvercoatingHeadTailSideValues->GetItem(idxOvercoatingSides)) )
							{

								bOvercoatingHeadTailSideNotEmpty = true
							}

						}
					}
					if (bOvercoatingHeadTailSideNotEmpty)

					{
						listDisabledValuePointer->Append(strOvercoatingBothAttrName)
						listOSAttrValue->RemoveAll()
						listOSAttrValue->Append("NA")
						ThisObject->SetAttributeObject(strOvercoatingBothAttrName, listOSAttrValue)
					}
				}
			}
		}

		
		/* Drilling Operation */
		strFSTExtSTUDYInstDrillingOperationPrefix = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_DRILLINGOPERATIONPREFIX"), 2)

		strFSTExtSTUDYInstDrillingOperationAbsHeadType = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_DRILLINGOPERATIONABSHEADTYPE"), 2)
		strFSTExtSTUDYInstDrillingOperationAbsHoleTC = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_DRILLINGOPERATIONABSHOLETC"), 2)
		strFSTExtSTUDYInstDrillingOperationAbsSpot = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_DRILLINGOPERATIONABSSPOT"), 2)
		strFSTExtSTUDYInstDrillingOperationAbsOversize = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_DRILLINGOPERATIONABSOVERSIZE"), 2)
		strFSTExtSTUDYInstDrillingOperationNsaMaterial = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_DRILLINGOPERATIONNSAMATERIAL"), 2)
		strFSTExtSTUDYInstDrillingOperationNsaTableSel = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_DRILLINGOPERATIONNSATABLESEL"), 2)
		strFSTExtSTUDYInstDrillingOperationConcat = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_DRILLINGOPERATIONCONCAT"), 2)
		strFSTExtDFMInstDrillingOperationPrefix = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_DRILLINGOPERATIONPREFIX"), 2)
		strFSTExtDFMInstDrillingOperationAbsHeadType = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_DRILLINGOPERATIONABSHEADTYPE"), 2)
		strFSTExtDFMInstDrillingOperationAbsHoleTC = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_DRILLINGOPERATIONABSHOLETC"), 2)
		strFSTExtDFMInstDrillingOperationAbsSpot = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_DRILLINGOPERATIONABSSPOT"), 2)
		strFSTExtDFMInstDrillingOperationAbsOversize = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_DRILLINGOPERATIONABSOVERSIZE"), 2)
		strFSTExtDFMInstDrillingOperationNsaMaterial = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_DRILLINGOPERATIONNSAMATERIAL"), 2)

		strFSTExtDFMInstDrillingOperationNsaTableSel = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_DRILLINGOPERATIONNSATABLESEL"), 2)
		strFSTExtDFMInstDrillingOperationConcat = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_DRILLINGOPERATIONCONCAT"), 2)
		

		if (strFSTInstRefBusinessType <> strFSTAttrTypeValueDef AND strFSTInstRefBusinessType <> strFSTAttrTypeValueDFM AND strFSTInstRefBusinessType <> strFSTAttrTypeValueFstSpecificStacking)

		{
			listDisabledValuePointer->Append(strFSTExtDFMInstDrillingOperationPrefix)
			listDisabledValuePointer->Append(strFSTExtDFMInstDrillingOperationAbsHeadType)


			listDisabledValuePointer->Append(strFSTExtDFMInstDrillingOperationAbsHoleTC)


			listDisabledValuePointer->Append(strFSTExtDFMInstDrillingOperationAbsSpot)
			listDisabledValuePointer->Append(strFSTExtDFMInstDrillingOperationAbsOversize)
			listDisabledValuePointer->Append(strFSTExtDFMInstDrillingOperationNsaMaterial)
			listDisabledValuePointer->Append(strFSTExtDFMInstDrillingOperationNsaTableSel)

			listDisabledValuePointer->Append(strFSTExtDFMInstDrillingOperationConcat)
		}
		else
		{
			Trace (1, ">> Controlling attributes: #,#,#,#,#,#,#,#", strFSTExtDFMInstDrillingOperationPrefix, strFSTExtDFMInstDrillingOperationAbsHeadType, strFSTExtDFMInstDrillingOperationAbsHoleTC, strFSTExtDFMInstDrillingOperationAbsSpot, strFSTExtDFMInstDrillingOperationAbsOversize, strFSTExtDFMInstDrillingOperationNsaMaterial, strFSTExtDFMInstDrillingOperationNsaTableSel, strFSTExtDFMInstDrillingOperationConcat)

			
			if ( ThisObject->GetAttributeString(strFSTExtDFMInstDrillingOperationPrefix) == "ABS1707" )
			{
				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationNsaMaterial)
				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationNsaTableSel)
				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationConcat)
			}
			else if ( ThisObject->GetAttributeString(strFSTExtDFMInstDrillingOperationPrefix) == "NSA2010" )
			{



				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationAbsHeadType)
				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationAbsHoleTC)
				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationAbsSpot)
				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationAbsOversize)
				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationConcat)
			}

			// Modification for N2H-27054: Start
			//else if ( ThisObject->GetAttributeString(strFSTExtDFMInstDrillingOperationPrefix) == "Manual value" )
			else if ( ThisObject->GetAttributeString(strFSTExtDFMInstDrillingOperationPrefix) == "Manual value" OR
						ThisObject->GetAttributeString(strFSTExtDFMInstDrillingOperationPrefix) == "Manual Value")
			// Modification for N2H-27054: End

			{
				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationAbsHeadType)


				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationAbsHoleTC)
				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationAbsSpot)
				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationAbsOversize)
				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationNsaMaterial)
				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationNsaTableSel)

			}

			else
			{
				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationAbsHeadType)
				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationAbsHoleTC)
				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationAbsSpot)
				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationAbsOversize)
				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationNsaMaterial)
				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationNsaTableSel)
				listDOControllingAttr->Append(strFSTExtDFMInstDrillingOperationConcat)
			}
		}
		if (strFSTInstRefBusinessType <> strFSTAttrTypeValueSTUDY)
		{
			listDisabledValuePointer->Append(strFSTExtSTUDYInstDrillingOperationPrefix)

			listDisabledValuePointer->Append(strFSTExtSTUDYInstDrillingOperationAbsHeadType)
			listDisabledValuePointer->Append(strFSTExtSTUDYInstDrillingOperationAbsHoleTC)

			listDisabledValuePointer->Append(strFSTExtSTUDYInstDrillingOperationAbsSpot)
			listDisabledValuePointer->Append(strFSTExtSTUDYInstDrillingOperationAbsOversize)


			listDisabledValuePointer->Append(strFSTExtSTUDYInstDrillingOperationNsaMaterial)
			listDisabledValuePointer->Append(strFSTExtSTUDYInstDrillingOperationNsaTableSel)
			listDisabledValuePointer->Append(strFSTExtSTUDYInstDrillingOperationConcat)

		}

		else
		{
			Trace (1, ">> Controlling attributes: #,#,#,#,#,#,#,#", strFSTExtSTUDYInstDrillingOperationPrefix, strFSTExtSTUDYInstDrillingOperationAbsHeadType, strFSTExtSTUDYInstDrillingOperationAbsHoleTC, strFSTExtSTUDYInstDrillingOperationAbsSpot, strFSTExtSTUDYInstDrillingOperationAbsOversize, strFSTExtSTUDYInstDrillingOperationNsaMaterial, strFSTExtSTUDYInstDrillingOperationNsaTableSel, strFSTExtSTUDYInstDrillingOperationConcat)
			
			if ( ThisObject->GetAttributeString(strFSTExtSTUDYInstDrillingOperationPrefix) == "ABS1707" )



			{
				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationNsaMaterial)
				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationNsaTableSel)
				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationConcat)

			}
			else if ( ThisObject->GetAttributeString(strFSTExtSTUDYInstDrillingOperationPrefix) == "NSA2010" )

			{
				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsHeadType)
				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsHoleTC)
				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsSpot)
				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsOversize)
				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationConcat)
			}
			// Modification for N2H-27054: Start
			//else if ( ThisObject->GetAttributeString(strFSTExtSTUDYInstDrillingOperationPrefix) == "Manual value" )
			else if ( ThisObject->GetAttributeString(strFSTExtSTUDYInstDrillingOperationPrefix) == "Manual value" OR
						ThisObject->GetAttributeString(strFSTExtSTUDYInstDrillingOperationPrefix) == "Manual Value" )
			// Modification for N2H-27054: End
			{
				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsHeadType)

				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsHoleTC)
				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsSpot)
				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsOversize)


				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationNsaMaterial)
				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationNsaTableSel)

			}
			else

			{
				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsHeadType)
				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsHoleTC)
				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsSpot)
				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsOversize)
				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationNsaMaterial)


				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationNsaTableSel)

				listDOControllingAttr->Append(strFSTExtSTUDYInstDrillingOperationConcat)
			}
		}


		intDOControllingAttrCounter = 1
		for intDOControllingAttrCounter while intDOControllingAttrCounter <= listDOControllingAttr->Size() 


		{
			listDisabledValuePointer->Append(listDOControllingAttr[intDOControllingAttrCounter])
		}

		
		/* Bonding Information */
		strFSTExtDFMInstBonding = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDING"), 2)
		strFSTExtDFMInstBondingProcessCodeBothSide = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPROCESSCODEBOTHSIDE"), 2)
		strFSTExtDFMInstBondingPTBothSide = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPTCODEBOTHSIDE"), 2)
		strFSTExtDFMInstBondingPCMBothSideV1 = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODEBOTHSIDEV1"), 2)
		strFSTExtDFMInstBondingPCMBothSideV2 = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODEBOTHSIDEV2"), 2)
		strFSTExtDFMInstBondingPCMBothSideV3 = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODEBOTHSIDEV3"), 2)


		strFSTExtDFMInstBondingPCMBothSideConcat = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODEBOTHSIDECONCAT"), 2)
		strFSTExtDFMInstBondingProcessCodeHeadSide = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPROCESSCODEHEADSIDE"), 2)
		strFSTExtDFMInstBondingPTHeadSide = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPTCODEHEADSIDE"), 2)
		strFSTExtDFMInstBondingPCMHeadSideV1 = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODEHEADSIDEV1"), 2)

		strFSTExtDFMInstBondingPCMHeadSideV2 = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODEHEADSIDEV2"), 2)
		strFSTExtDFMInstBondingPCMHeadSideV3 = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODEHEADSIDEV3"), 2)
		strFSTExtDFMInstBondingPCMHeadSideConcat = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODEHEADSIDECONCAT"), 2)

		strFSTExtDFMInstBondingProcessCodeTailSide = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPROCESSCODETAILSIDE"), 2)

		strFSTExtDFMInstBondingPTTailSide = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPTCODETAILSIDE"), 2)
		strFSTExtDFMInstBondingPCMTailSideV1 = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODETAILSIDEV1"), 2)

		strFSTExtDFMInstBondingPCMTailSideV2 = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODETAILSIDEV2"), 2)

		strFSTExtDFMInstBondingPCMTailSideV3 = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODETAILSIDEV3"), 2)
		strFSTExtDFMInstBondingPCMTailSideConcat = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODETAILSIDECONCAT"), 2)
		
		if (strFSTInstRefBusinessType <> strFSTAttrTypeValueDef AND strFSTInstRefBusinessType <> strFSTAttrTypeValueDFM AND strFSTInstRefBusinessType <> strFSTAttrTypeValueFstSpecificStacking)

		{
			listDisabledValuePointer->Append(strFSTExtDFMInstBonding)
			listDisabledValuePointer->Append(strFSTExtDFMInstBondingProcessCodeBothSide)
			listDisabledValuePointer->Append(strFSTExtDFMInstBondingPTBothSide)
			listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMBothSideV1)
			listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMBothSideV2)

			listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMBothSideV3)

			listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMBothSideConcat)
			listDisabledValuePointer->Append(strFSTExtDFMInstBondingProcessCodeHeadSide)
			listDisabledValuePointer->Append(strFSTExtDFMInstBondingPTHeadSide)
			listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMHeadSideV1)
			listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMHeadSideV2)


			listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMHeadSideV3)

			listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMHeadSideConcat)
			listDisabledValuePointer->Append(strFSTExtDFMInstBondingProcessCodeTailSide)
			listDisabledValuePointer->Append(strFSTExtDFMInstBondingPTTailSide)
			listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMTailSideV1)
			listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMTailSideV2)
			listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMTailSideV3)

			listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMTailSideConcat)

		}
		else


		{


			Trace (1, ">> Controlling attributes: #", strFSTExtDFMInstBonding)
			if (not(ThisObject->GetAttributeBoolean(strFSTExtDFMInstBonding)))
			{
				listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMBothSideConcat)
				listDisabledValuePointer->Append(strFSTExtDFMInstBondingProcessCodeBothSide)
				listDisabledValuePointer->Append(strFSTExtDFMInstBondingPTBothSide)
				listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMBothSideV1)

				listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMBothSideV2)
				listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMBothSideV3)
				
				listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMHeadSideConcat)
				listDisabledValuePointer->Append(strFSTExtDFMInstBondingProcessCodeHeadSide)
				listDisabledValuePointer->Append(strFSTExtDFMInstBondingPTHeadSide)
				listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMHeadSideV1)
				listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMHeadSideV2)
				listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMHeadSideV3)
				
				listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMTailSideConcat)
				listDisabledValuePointer->Append(strFSTExtDFMInstBondingProcessCodeTailSide)
				listDisabledValuePointer->Append(strFSTExtDFMInstBondingPTTailSide)
				listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMTailSideV1)
				listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMTailSideV2)
				listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMTailSideV3)

				
				listBIAttrValue = ThisObject->GetAttributeObject(strFSTExtDFMInstBondingProcessCodeBothSide)
				listBIAttrValue->RemoveAll()
				listBIAttrValue->Append("NA")
				ThisObject->SetAttributeObject(strFSTExtDFMInstBondingProcessCodeBothSide, listBIAttrValue)
				ThisObject->SetAttributeObject(strFSTExtDFMInstBondingPTBothSide, listBIAttrValue)
				ThisObject->SetAttributeString(strFSTExtDFMInstBondingPCMBothSideConcat, "NA")
				ThisObject->SetAttributeString(strFSTExtDFMInstBondingPCMBothSideV1, "NA")


				ThisObject->SetAttributeString(strFSTExtDFMInstBondingPCMBothSideV2, "NA")
				ThisObject->SetAttributeString(strFSTExtDFMInstBondingPCMBothSideV3, "NA")
				
				ThisObject->SetAttributeObject(strFSTExtDFMInstBondingProcessCodeHeadSide, listBIAttrValue)
				ThisObject->SetAttributeObject(strFSTExtDFMInstBondingPTHeadSide, listBIAttrValue)
				ThisObject->SetAttributeString(strFSTExtDFMInstBondingPCMHeadSideConcat, "NA")
				ThisObject->SetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV1, "NA")
				ThisObject->SetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV2, "NA")
				ThisObject->SetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV3, "NA")
				
				ThisObject->SetAttributeObject(strFSTExtDFMInstBondingProcessCodeTailSide, listBIAttrValue)
				ThisObject->SetAttributeObject(strFSTExtDFMInstBondingPTTailSide, listBIAttrValue)
				ThisObject->SetAttributeString(strFSTExtDFMInstBondingPCMTailSideConcat, "NA")
				ThisObject->SetAttributeString(strFSTExtDFMInstBondingPCMTailSideV1, "NA")

				ThisObject->SetAttributeString(strFSTExtDFMInstBondingPCMTailSideV2, "NA")
				ThisObject->SetAttributeString(strFSTExtDFMInstBondingPCMTailSideV3, "NA")
			}


			else
			{
				// Both side
				listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideConcat)
				// [DataModel] to be added when 'Process Code Both Side' attribute is a multi-valuated attribute

				listBIAttrValue = ThisObject->GetAttributeObject(strFSTExtDFMInstBondingProcessCodeBothSide)

				// [DataModel] to be added when 'Process Code Both Side' attribute is a mono-valuated attribute

				//listBIAttrValue->RemoveAll()
				//listBIAttrValue->Append(ThisObject->GetAttributeString(strFSTExtDFMInstBondingProcessCodeBothSide))

				boolBIEmptyList = true
				intBIAttrValueCounter = 1
				for intBIAttrValueCounter while intBIAttrValueCounter <= listBIAttrValue->Size()
				{
					if ( (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "") AND (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "NA") )
					{

						boolBIEmptyList = false
						intBIAttrValueCounter = listBIAttrValue->Size() + 1




					}
				}


				if (not(boolBIEmptyList))
				{

					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV1)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV2)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV3)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingProcessCodeHeadSide)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPTHeadSide)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV1)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV2)

					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV3)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingProcessCodeTailSide)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPTTailSide)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMTailSideV1)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMTailSideV2)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMTailSideV3)
				}
				listBIAttrValue = ThisObject->GetAttributeObject(strFSTExtDFMInstBondingPTBothSide)
				boolBIEmptyList = true
				intBIAttrValueCounter = 1
				for intBIAttrValueCounter while intBIAttrValueCounter <= listBIAttrValue->Size()
				{

					if ( (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "") AND (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "NA") )
					{

						boolBIEmptyList = false
						intBIAttrValueCounter = listBIAttrValue->Size() + 1
					}
				}
				if (not(boolBIEmptyList))
				{
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPTHeadSide)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPTTailSide)
				}
				if ( ((ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV1) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV1) <> "NA"))
					OR ((ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV2) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV2) <> "NA"))
					OR ((ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV3) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV3) <> "NA")))

				{
					listBIControllingAttr->Append(strFSTExtDFMInstBondingProcessCodeBothSide)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingProcessCodeHeadSide)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPTHeadSide)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV1)

					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV2)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV3)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingProcessCodeTailSide)



					listBIControllingAttr->Append(strFSTExtDFMInstBondingPTTailSide)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMTailSideV1)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMTailSideV2)

					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMTailSideV3)

				}

				
				// Head side


				listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMHeadSideConcat)
				// [DataModel] to be added when 'Process Code Head Side' attribute is a multi-valuated attribute

				listBIAttrValue = ThisObject->GetAttributeObject(strFSTExtDFMInstBondingProcessCodeHeadSide)
				// [DataModel] to be added when 'Process Code Head Side' attribute is a mono-valuated attribute
				//listBIAttrValue->RemoveAll()
				//listBIAttrValue->Append(ThisObject->GetAttributeString(strFSTExtDFMInstBondingProcessCodeHeadSide))


				boolBIEmptyList = true
				intBIAttrValueCounter = 1
				for intBIAttrValueCounter while intBIAttrValueCounter <= listBIAttrValue->Size()


				{
					if ( (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "") AND (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "NA") )

					{
						boolBIEmptyList = false

						intBIAttrValueCounter = listBIAttrValue->Size() + 1

					}
				}
				if (not(boolBIEmptyList))
				{
					listBIControllingAttr->Append(strFSTExtDFMInstBondingProcessCodeBothSide)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPTBothSide)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV1)

					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV2)

					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV3)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV1)

					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV2)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV3)
				}
				listBIAttrValue = ThisObject->GetAttributeObject(strFSTExtDFMInstBondingPTHeadSide)
				boolBIEmptyList = true
				intBIAttrValueCounter = 1
				for intBIAttrValueCounter while intBIAttrValueCounter <= listBIAttrValue->Size()
				{
					if ( (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "") AND (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "NA") )
					{

						boolBIEmptyList = false
						intBIAttrValueCounter = listBIAttrValue->Size() + 1
					}
				}

				if (not(boolBIEmptyList))

				{
					listBIControllingAttr->Append(strFSTExtDFMInstBondingProcessCodeBothSide)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPTBothSide)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV1)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV2)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV3)

				}
				if ( ((ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV1) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV1) <> "NA"))

				OR ((ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV2) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV2) <> "NA"))
				OR ((ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV3) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV3) <> "NA")) )
				{

					listBIControllingAttr->Append(strFSTExtDFMInstBondingProcessCodeBothSide)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPTBothSide)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV1)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV2)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV3)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingProcessCodeHeadSide)

				}
				
				// Tail side
				listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMTailSideConcat)
				// [DataModel] to be added when 'Process Code Tail Side' attribute is a multi-valuated attribute
				listBIAttrValue = ThisObject->GetAttributeObject(strFSTExtDFMInstBondingProcessCodeTailSide)
				// [DataModel] to be added when 'Process Code Tail Side' attribute is a mono-valuated attribute
				//listBIAttrValue->RemoveAll()


				//listBIAttrValue->Append(ThisObject->GetAttributeString(strFSTExtDFMInstBondingProcessCodeTailSide))
				boolBIEmptyList = true
				intBIAttrValueCounter = 1

				for intBIAttrValueCounter while intBIAttrValueCounter <= listBIAttrValue->Size()

				{
					if ( (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "") AND (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "NA") )
					{
						boolBIEmptyList = false

						intBIAttrValueCounter = listBIAttrValue->Size() + 1
					}
				}

				if (not(boolBIEmptyList))

				{
					listBIControllingAttr->Append(strFSTExtDFMInstBondingProcessCodeBothSide)

					listBIControllingAttr->Append(strFSTExtDFMInstBondingPTBothSide)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV1)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV2)


					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV3)

					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMTailSideV1)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMTailSideV2)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMTailSideV3)
				}
				listBIAttrValue = ThisObject->GetAttributeObject(strFSTExtDFMInstBondingPTTailSide)
				boolBIEmptyList = true
				intBIAttrValueCounter = 1
				for intBIAttrValueCounter while intBIAttrValueCounter <= listBIAttrValue->Size()

				{
					if ( (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "") AND (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "NA") )


					{


						boolBIEmptyList = false
						intBIAttrValueCounter = listBIAttrValue->Size() + 1
					}
				}
				if (not(boolBIEmptyList))
					{
						listBIControllingAttr->Append(strFSTExtDFMInstBondingProcessCodeBothSide)

						listBIControllingAttr->Append(strFSTExtDFMInstBondingPTBothSide)
						listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV1)
						listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV2)
						listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV3)
				}
				if (((ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV1) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV1) <> "NA"))
				OR ((ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV2) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV2) <> "NA"))
				OR ((ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV3) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV3) <> "NA")) )

				{
					listBIControllingAttr->Append(strFSTExtDFMInstBondingProcessCodeBothSide)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPTBothSide)


					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV1)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV2)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingPCMBothSideV3)
					listBIControllingAttr->Append(strFSTExtDFMInstBondingProcessCodeTailSide)
				}
				
				intBIControllingAttrCounter = 1

				for intBIControllingAttrCounter while intBIControllingAttrCounter <= listBIControllingAttr->Size() 
				{
					listDisabledValuePointer->Append(listBIControllingAttr[intBIControllingAttrCounter])
				}
			}
		}

		
		/* Cleaning Stripping */

		strCleaningStrippingAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_CLEANINGSTRIPPING"), 2)
		strCleaningStrippingBothAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_CLEANINGSTRIPPINGBOTHSIDE"), 2)
		strCleaningStrippingHeadAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_CLEANINGSTRIPPINGHEADSIDE"), 2)
		strCleaningStrippingTailAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_CLEANINGSTRIPPINGTAILSIDE"), 2)
		

		if (strFSTInstRefBusinessType <> strFSTAttrTypeValueDef AND strFSTInstRefBusinessType <> strFSTAttrTypeValueDFM  AND strFSTInstRefBusinessType <> strFSTAttrTypeValueFstSpecificStacking)
		{		
			listDisabledValuePointer->Append(strCleaningStrippingAttrName)
			listDisabledValuePointer->Append(strCleaningStrippingBothAttrName)
			listDisabledValuePointer->Append(strCleaningStrippingHeadAttrName)
			listDisabledValuePointer->Append(strCleaningStrippingTailAttrName)
		}

		else if(ThisObject->GetAttributeBoolean(strCleaningStrippingAttrName) == false)
		{

			listDisabledValuePointer->Append(strCleaningStrippingBothAttrName)
			listDisabledValuePointer->Append(strCleaningStrippingHeadAttrName)
			listDisabledValuePointer->Append(strCleaningStrippingTailAttrName)

		}
		else


		{

			if ( ("" <> ThisObject->GetAttributeString(strCleaningStrippingBothAttrName)) AND ("NA" <> ThisObject->GetAttributeString(strCleaningStrippingBothAttrName)) )

			{
				listDisabledValuePointer->Append(strCleaningStrippingHeadAttrName)
				listDisabledValuePointer->Append(strCleaningStrippingTailAttrName)
			}
			else if ( ( ("" <> ThisObject->GetAttributeString(strCleaningStrippingHeadAttrName)) AND ("NA" <> ThisObject->GetAttributeString(strCleaningStrippingHeadAttrName)) )
				OR ( ("" <> ThisObject->GetAttributeString(strCleaningStrippingTailAttrName)) AND ("NA" <> ThisObject->GetAttributeString(strCleaningStrippingTailAttrName)) ) )
			{
				listDisabledValuePointer->Append(strCleaningStrippingBothAttrName)
			}
		}
		


		/* Torque */
		strFSTExtDFMInstTorqueValue = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_TORQUEVALUE"), 2)
		strFSTExtDFMInstTorqueSpecificValueNominal = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_TORQUESPECIFICVALUENOMINAL"), 2)
		strFSTExtDFMInstTorqueSpecificValueTol = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_TORQUESPECIFICVALUETOL"), 2)
		strFSTExtDFMInstTorqueSpecificValueConcat = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_TORQUESPECIFICVALUECONCAT"), 2)

		if (strFSTInstRefBusinessType <> strFSTAttrTypeValueDef AND strFSTInstRefBusinessType <> strFSTAttrTypeValueDFM AND strFSTInstRefBusinessType <> strFSTAttrTypeValueFstSpecificStacking)

		{
			listDisabledValuePointer->Append(strFSTExtDFMInstTorqueValue)

			listDisabledValuePointer->Append(strFSTExtDFMInstTorqueSpecificValueNominal)
			listDisabledValuePointer->Append(strFSTExtDFMInstTorqueSpecificValueTol)
			listDisabledValuePointer->Append(strFSTExtDFMInstTorqueSpecificValueConcat)
		}
		else

		{

			if ( ("FOLLOWING RELEVANT AIPS" == ThisObject->GetAttributeString(strFSTExtDFMInstTorqueValue))
				OR ("" == ThisObject->GetAttributeString(strFSTExtDFMInstTorqueValue)) )
			{

				listDisabledValuePointer->Append(strFSTExtDFMInstTorqueSpecificValueNominal)


				listDisabledValuePointer->Append(strFSTExtDFMInstTorqueSpecificValueTol)
			}

			listDisabledValuePointer->Append(strFSTExtDFMInstTorqueSpecificValueConcat)
		}

		
		/* Study Fastener Information */

		if (strFSTInstRefBusinessType <> strFSTAttrTypeValueSTUDY)
		{


			strFSTExtSTUDYInstFSTType = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_FASTENERTYPE"), 2)
			strFSTExtSTUDYInstScrewFamily = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_SCREWFAMILY"), 2)
			strFSTExtSTUDYWashScew = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_WASHERFAMILYSCREWHEAD"), 2)
			strFSTExtSTUDYWashNut = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_WASHERFAMILYNUT"), 2)
			strFSTExtSTUDYNutFamily = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_NUTFAMILY"), 2)



			listDisabledValuePointer->Append(strFSTExtSTUDYInstFSTType)
			listDisabledValuePointer->Append(strFSTExtSTUDYInstScrewFamily)
			listDisabledValuePointer->Append(strFSTExtSTUDYWashScew)
			listDisabledValuePointer->Append(strFSTExtSTUDYWashNut)



			listDisabledValuePointer->Append(strFSTExtSTUDYNutFamily)
		}

		
		/* Attributes controlling other attributes enable/disable */
		strFSTExtDFMInstControllingAttr = "AIRBUS_E_FST_INSTANCE_DFM_FSTOVERCOATING,AIRBUS_E_FST_INSTANCE_DFM_FSTOVERCOATINGHEADSIDE,AIRBUS_E_FST_INSTANCE_DFM_FSTOVERCOATINGTAILSIDE|AIRBUS_E_FST_INSTANCE_DFM_FSTBONDING,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPROCESSCODEBOTHSIDE,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPTCODEBOTHSIDE,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODEBOTHSIDEV1,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODEBOTHSIDEV2,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODEBOTHSIDEV3,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODEBOTHSIDECONCAT,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPROCESSCODEHEADSIDE,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPTCODEHEADSIDE,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODEHEADSIDEV1,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODEHEADSIDEV2,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODEHEADSIDEV3,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODEHEADSIDECONCAT,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPROCESSCODETAILSIDE,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPTCODETAILSIDE,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODETAILSIDEV1,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODETAILSIDEV2,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODETAILSIDEV3,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODETAILSIDECONCAT|AIRBUS_E_FST_INSTANCE_DFM_FSTCLEANINGSTRIPPING,AIRBUS_E_FST_INSTANCE_DFM_FSTCLEANINGSTRIPPINGBOTHSIDE,AIRBUS_E_FST_INSTANCE_DFM_FSTCLEANINGSTRIPPINGHEADSIDE,AIRBUS_E_FST_INSTANCE_DFM_FSTCLEANINGSTRIPPINGTAILSIDE"
		//strFSTExtDFMInstControllingAttr = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_CONTROLLING_ATTR"), 2)
		listFSTExtDFMInstControllingAttr = SplitString(strFSTExtDFMInstControllingAttr, "|")

		intControllingAttr = 1
		for intControllingAttr while intControllingAttr <= listFSTExtDFMInstControllingAttr->Size() 


		{
			strControllingAttr = listFSTExtDFMInstControllingAttr[intControllingAttr]



			Trace (1, ">> Controlling attributes # / #: #", intControllingAttr, listFSTExtDFMInstControllingAttr->Size(), strControllingAttr)

			
			listControllingAttr = SplitString(strControllingAttr, ",")
			if ( (listControllingAttr <> NULL) AND (listControllingAttr->Size() > 1) )
			{
				if ( ThisObject->GetAttributeBoolean(listControllingAttr[1]) == false )


				{
					intControllingAttrCounter = 2

					for intControllingAttrCounter while intControllingAttrCounter <= listControllingAttr->Size() 

					{

						listDisabledValuePointer->Append(listControllingAttr[intControllingAttrCounter])


					}

				}
			}
		}
		
		/* List of Attributes */

		if ( extAttrValuesFileSheet <> NULL )
		{
			idxAttrsRow = 1
			for idxAttrsRow while idxAttrsRow < extAttrValuesFileSheet.RowsNb
			{

				strAttrName = extAttrValuesFileSheet->CellAsString(idxAttrsRow, idxAttrsNamesCol)

				strAttrValuesDocument = extAttrValuesFileSheet->CellAsString(idxAttrsRow, idxAttrsValuesDocumentCol)
				strAttrComboboxType = extAttrValuesFileSheet->CellAsString(idxAttrsRow, idxAttrsComboboxTypeCol)


				strAttrShowDescription = extAttrValuesFileSheet->CellAsString(idxAttrsRow, idxAttrsShowDescriptionCol)

				strAttrMultiValue = extAttrValuesFileSheet->CellAsString(idxAttrsRow, idxAttrsMultiValueCol)
				
				if ( ("" <> strAttrName) AND (NULL <> strAttrName) 
					AND (listDisabledValuePointer->IndexOf(strAttrName, 1) <= 0)
					AND ("" <> strAttrValuesDocument) AND (NULL <> strAttrValuesDocument) 
					AND ("" <> strAttrComboboxType) AND (NULL <> strAttrComboboxType) )
				{
					list_Attributesfor_Combobox->Append(strAttrName)
					list_AttrValuesDocumentsfor_Combobox->Append(strAttrValuesDocument)


					list_AttrComboboxTypesfor_Combobox->Append(strAttrComboboxType)
					list_AttrShowDescriptionsfor_Combobox->Append(strAttrShowDescription)
					list_AttrMultiValuesfor_Combobox->Append(strAttrMultiValue)
				}
			}
		}
		
		/* Combobox for Dependency Attributes */
		strDepAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_INSTALLATION"), 2)

		strAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_INSTALLATIONPTCODE"), 2)
		
		if ( "DRY" == ThisObject->GetAttributeString(strDepAttrName)



			OR "" == ThisObject->GetAttributeString(strDepAttrName) )
		{
			listDisabledValuePointer->Append(strAttrName)

		}
		/* else

		{
			list_DependingAttributes->Append(strDepAttrName)
			list_DepAttributesfor_Combobox->Append(strAttrName)
			list_DepAttrValuesDocumentsfor_Combobox->Append("Eurodrone_FST_INSTANCE_INSTALLATIONPTCODE_Values")

			list_DepAttrComboboxTypesfor_Combobox->Append("HelpValues")

			list_DepAttrShowDescriptionsfor_Combobox->Append("1")
			list_DepAttrMultiValuesfor_Combobox->Append("1")
		}
		*/
	}


	if ( Parameters->GetAttributeString("PropagationMode") == "Valuation") /* Valuation Mode */
	{
		//let strEditAttributeId (String)
		let strEditAttributeValue (String)

		let listEditAttributeValues (List)

		let boolFoundEditAttributeId (Boolean)
		

		strEditAttributeId = Parameters->GetAttributeString("EditAttributeId")
		
		boolFoundEditAttributeId = false
		
		Trace(1,"> BL # on / Valuation Mode : [#] ", blName, strEditAttributeId)

		


		/* Non-impacting attributes */
		strFSTExtSTUDYInstHeadSide = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_HEADSIDE"), 2)
		strFSTExtDFMInstHeadSide = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_HEADSIDE"), 2)
		strFSTExtSTUDYInstDrillingOperationNsaMaterial = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_DRILLINGOPERATIONNSAMATERIAL"), 2)
		strFSTExtDFMInstDrillingOperationNsaMaterial = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_DRILLINGOPERATIONNSAMATERIAL"), 2)


		strFSTExtSTUDYInstScrewFamily = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_SCREWFAMILY"), 2)
		strFSTExtSTUDYWashScew = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_WASHERFAMILYSCREWHEAD"), 2)
		strFSTExtSTUDYWashNut = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_WASHERFAMILYNUT"), 2)





		strFSTExtSTUDYNutFamily = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_NUTFAMILY"), 2)
		
		if( ( strEditAttributeId == strFSTExtSTUDYInstHeadSide )
			OR ( strEditAttributeId == strFSTExtDFMInstHeadSide )
			OR ( strEditAttributeId == strInstallationPTCodeAttrName )
			OR ( strEditAttributeId == strFSTExtSTUDYInstDrillingOperationNsaMaterial )

			OR ( strEditAttributeId == strFSTExtDFMInstDrillingOperationNsaMaterial )
			OR ( strEditAttributeId == strFSTExtSTUDYInstScrewFamily )

			OR ( strEditAttributeId == strFSTExtSTUDYWashScew )
			OR ( strEditAttributeId == strFSTExtSTUDYWashNut )
			OR ( strEditAttributeId == strFSTExtSTUDYNutFamily ) )
		{
			boolFoundEditAttributeId = true

		}


		

		/* Installation Information */
		if not(boolFoundEditAttributeId)
		{



			strInstallationAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_INSTALLATION"), 2)


			strInstallationPTCodeAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_INSTALLATIONPTCODE"), 2)

			if ( (strEditAttributeId == strInstallationAttrName)
				OR ( strEditAttributeId == strInstallationPTCodeAttrName ) )
			{
				boolFoundEditAttributeId = true

				// Remove description on PT Code
				if (strEditAttributeId == strInstallationPTCodeAttrName)

				{

					listEditAttributeValues = ThisObject->Eurodrone_InstanceMethodsLib::VPMInstance_RemoveDescriptionMulti(strEditAttributeId)

				}

				
				if (strEditAttributeId == strInstallationAttrName)
				{
					listIIAttrValue = ThisObject->GetAttributeObject(strInstallationPTCodeAttrName)
					listIIAttrValue->RemoveAll()
					listIIAttrValue->Append("NA")

					ThisObject->SetAttributeObject(strInstallationPTCodeAttrName, listIIAttrValue)
				}
			}
		}
		

		/** START: Added code for "N2H-4986 : NIS-Instance Automatic AIPS value" **/
		
		bonding = ThisObject -> GetAttributeBoolean("AIRBUS_E_FST_INSTANCE_DFM_FSTBONDING")
		cleanningStripping = ThisObject -> GetAttributeBoolean("AIRBUS_E_FST_INSTANCE_DFM_FSTCLEANINGSTRIPPING")
		installCondition = ThisObject -> GetAttributeString("AIRBUS_E_FST_INSTANCE_DFM_FSTINSTALLCONDITION")
		
		
		if (strEditAttributeId == "AIRBUS_E_FST_INSTANCE_DFM_FSTBONDING" OR strEditAttributeId == "AIRBUS_E_FST_INSTANCE_DFM_FSTCLEANINGSTRIPPING" OR strEditAttributeId == "AIRBUS_E_FST_INSTANCE_DFM_FSTINSTALLCONDITION" ) {

		
			Trace(3, "===============> START - Update Instance AIPS values automatically on Fastener DFM/ Spot Fastener <=================")

			aipsValues = ThisObject.GetAttributeObject("AIRBUS_E_Instance_EPASSY_InstanceAssociatedAIPS")
			

			if ( (aipsValues.Size() == 1) AND (aipsValues[1] == "NA") ) {
				aipsValues.RemoveAll()
			}
			
			// AIPS09-01-002; AIPS07-01-006
			if (bonding == true AND cleanningStripping == true) 

			{	
				aipsValues.Append("AIPS09-01-002")
				aipsValues.Append("AIPS07-01-006")

				Trace(3, "Add AIPS09-01-002; AIPS07-01-006")

			}
			
			// AIPS07-01-006
			if (bonding == true AND cleanningStripping == false) 

			{
				aipsValues.Append("AIPS07-01-006")
				Trace(3, "Add AIPS07-01-006")
				

				// Remove AIPS09-01-002 if exist
				for indexAips=1 while indexAips<=aipsValues.Size() 

				{
					if ( aipsValues[indexAips] == "AIPS09-01-002" ) {
						Trace(3, "Removed: #", aipsValues[indexAips])

						aipsValues.RemoveItem(indexAips)


					}

				}

			}
			

			// AIPS09-01-002
			if (bonding == false AND cleanningStripping == true) 
			{
				aipsValues.Append("AIPS09-01-002")
				Trace(3, "Add AIPS09-01-002")
				
				// Remove AIPS07-01-006 if exist
				for indexAips=1 while indexAips<=aipsValues.Size() 
				{
					if ( aipsValues[indexAips] == "AIPS07-01-006" ) {

						Trace(3, "Removed: #", aipsValues[indexAips])

						aipsValues.RemoveItem(indexAips)
					}
				}

			}
			
			// AIPS09-01-002 and/or AIPS07-01-006 shall be removed
			if (bonding == false AND cleanningStripping == false) 

			{
				if (aipsValues.Size() <> 0) 


				{
					// Remove AIPS07-01-006 if exist
					for indexAips=1 while indexAips<=aipsValues.Size() 
					{
						if ( aipsValues[indexAips] == "AIPS07-01-006" ) {
							Trace(3, "Removed: #", aipsValues[indexAips])
							aipsValues.RemoveItem(indexAips)



						}
					}

					// Remove AIPS09-01-002 if exist

					for indexAips=1 while indexAips<=aipsValues.Size() 
					{

						if ( aipsValues[indexAips] == "AIPS09-01-002" ) {


							Trace(3, "Removed: #", aipsValues[indexAips])
							aipsValues.RemoveItem(indexAips)
						}
					}

				}

			}
			

			// If instance DFM Installation Condition=WET => Instance Associated AIPS= AIPS05-05-004;**
			if (installCondition == "WET") 
			{
				Trace(3, "installCondition == WET")
				Trace(3, "Add AIPS05-05-004")
				aipsValues.Append("AIPS05-05-004")

			}

			else if (installCondition == "DRY") 
			{

				Trace(3, "installCondition == DRY")

				if (aipsValues.Size() <> 0) 
				{

					for indexAips=1 while indexAips<=aipsValues.Size() 
					{
						if (aipsValues[indexAips] == "AIPS05-05-004") {
							Trace(3, "Removed: #", aipsValues[indexAips])
							aipsValues.RemoveItem(indexAips)

						}

					}

				}
			}
			aipsValues.RemoveDuplicates()
			

			if (aipsValues.Size() <> 0) {
				Trace(3, "aipsValues.Size() <> 0")

				ThisObject.SetAttributeObject("AIRBUS_E_Instance_EPASSY_InstanceAssociatedAIPS", aipsValues)
			}
			else {
				Trace(3, "aipsValues.Size() == 0")
				aipsValues.Append("NA")
				ThisObject.SetAttributeObject("AIRBUS_E_Instance_EPASSY_InstanceAssociatedAIPS", aipsValues)
			}
			
			Trace(3, "===============> END - Update Instance AIPS values automatically on Fastener DFM/ Spot Fastener <=================")
		}
		
		/** END: Added code for "N2H-4986 : NIS-Instance Automatic AIPS value" **/
		


		/* Overcoating Information */
		if not(boolFoundEditAttributeId)
		{
			strOvercoatingAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_OVERCOATING"), 2)

			strOvercoatingBothAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_OVERCOATINGBOTHSIDE"), 2)
			strOvercoatingHeadAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_OVERCOATINGHEADSIDE"), 2)

			strOvercoatingTailAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_OVERCOATINGTAILSIDE"), 2)

			

			if( ( strEditAttributeId == strOvercoatingAttrName )
				OR ( strEditAttributeId == strOvercoatingBothAttrName )
				OR ( strEditAttributeId == strOvercoatingHeadAttrName )

				OR ( strEditAttributeId == strOvercoatingTailAttrName ) )
			{


				boolFoundEditAttributeId = true
				let listOSAttrValue (List)

				

				// Remove description on Overcoating
				if ( ( strEditAttributeId == strOvercoatingBothAttrName )
					OR ( strEditAttributeId == strOvercoatingHeadAttrName )
					OR ( strEditAttributeId == strOvercoatingTailAttrName ) )
				{
					listEditAttributeValues = ThisObject->Eurodrone_InstanceMethodsLib::VPMInstance_RemoveDescriptionMulti(strEditAttributeId)

				}
				

				// Overcoating true / false



				if (not(ThisObject->GetAttributeBoolean(strOvercoatingAttrName)))

				{

					pGenericPointer = ThisObject->GetAttributeValuePointer(strOvercoatingBothAttrName)

					if ( pGenericPointer <> NULL )
					{
						pGenericPointer.Constant = false
						listOSAttrValue = ThisObject->GetAttributeObject(strOvercoatingBothAttrName)
						listOSAttrValue->RemoveAll()
						listOSAttrValue->Append("NA")
						ThisObject->SetAttributeObject(strOvercoatingBothAttrName, listOSAttrValue)
						listDisabledValuePointer->Append(strOvercoatingBothAttrName)
					}
					pGenericPointer = ThisObject->GetAttributeValuePointer(strOvercoatingHeadAttrName)
					if ( pGenericPointer <> NULL )
					{

						pGenericPointer.Constant = false

						listOSAttrValue = ThisObject->GetAttributeObject(strOvercoatingHeadAttrName)
						listOSAttrValue->RemoveAll()
						listOSAttrValue->Append("NA")
						ThisObject->SetAttributeObject(strOvercoatingHeadAttrName, listOSAttrValue)

						listDisabledValuePointer->Append(strOvercoatingHeadAttrName)
					}

					pGenericPointer = ThisObject->GetAttributeValuePointer(strOvercoatingTailAttrName)
					if ( pGenericPointer <> NULL )
					{

						pGenericPointer.Constant = false
						listOSAttrValue = ThisObject->GetAttributeObject(strOvercoatingTailAttrName)

						listOSAttrValue->RemoveAll()
						listOSAttrValue->Append("NA")
						ThisObject->SetAttributeObject(strOvercoatingTailAttrName, listOSAttrValue)


						listDisabledValuePointer->Append(strOvercoatingTailAttrName)
					}
				}
				else

				{




					bOvercoatingBothSideNotEmpty = false
					if (ThisObject->HasAttribute(strOvercoatingBothAttrName))
					{
						set listOvercoatingBothSideValues = ThisObject->GetAttributeObject(strOvercoatingBothAttrName)



						idxOvercoatingSides = 1
						for idxOvercoatingSides while idxOvercoatingSides <= listOvercoatingBothSideValues->Size()
						{
							if ( "" <> listOvercoatingBothSideValues->GetItem(idxOvercoatingSides) AND "NA" <> listOvercoatingBothSideValues->GetItem(idxOvercoatingSides))
							{
								bOvercoatingBothSideNotEmpty = true
							}

						}
					}

					if (bOvercoatingBothSideNotEmpty)
					{
						if (listDisabledValuePointer->IndexOf(strOvercoatingBothAttrName, 1) <= 0)
						{
							listEnabledValuePointer->Append(strOvercoatingBothAttrName)

						}

						pGenericPointer = ThisObject->GetAttributeValuePointer(strOvercoatingHeadAttrName)

						if ( pGenericPointer <> NULL )
						{

							pGenericPointer.Constant = false
							listOSAttrValue = ThisObject->GetAttributeObject(strOvercoatingHeadAttrName)
							listOSAttrValue->RemoveAll()
							listOSAttrValue->Append("NA")


							ThisObject->SetAttributeObject(strOvercoatingHeadAttrName, listOSAttrValue)
							listDisabledValuePointer->Append(strOvercoatingHeadAttrName)
						}

						pGenericPointer = ThisObject->GetAttributeValuePointer(strOvercoatingTailAttrName)


						if ( pGenericPointer <> NULL )
						{
							pGenericPointer.Constant = false
							listOSAttrValue = ThisObject->GetAttributeObject(strOvercoatingTailAttrName)



							listOSAttrValue->RemoveAll()
							listOSAttrValue->Append("NA")
							ThisObject->SetAttributeObject(strOvercoatingTailAttrName, listOSAttrValue)
							listDisabledValuePointer->Append(strOvercoatingTailAttrName)
						}
					}
					else 


					{

						bOvercoatingHeadTailSideNotEmpty = false
						if ( (ThisObject->HasAttribute(strOvercoatingHeadAttrName)) AND (ThisObject->HasAttribute(strOvercoatingTailAttrName)) )
						{
							set listOvercoatingHeadSideValues = ThisObject->GetAttributeObject(strOvercoatingHeadAttrName)
							set listOvercoatingTailSideValues = ThisObject->GetAttributeObject(strOvercoatingTailAttrName)
							listOvercoatingHeadTailSideValues = listOvercoatingHeadSideValues + listOvercoatingTailSideValues

							idxOvercoatingSides = 1


							for idxOvercoatingSides while idxOvercoatingSides <= listOvercoatingHeadTailSideValues->Size()
							{
								if ( "" <> listOvercoatingHeadTailSideValues->GetItem(idxOvercoatingSides) AND "NA" <> listOvercoatingHeadTailSideValues->GetItem(idxOvercoatingSides) )
								{



									bOvercoatingHeadTailSideNotEmpty = true


								}
							}

						}
						

						if ( bOvercoatingHeadTailSideNotEmpty OR (listDisabledValuePointer->IndexOf(strOvercoatingBothAttrName, 1) <= 0) )
						{
							if (bOvercoatingHeadTailSideNotEmpty)
							{
								listOSAttrValue = ThisObject->GetAttributeObject(strOvercoatingBothAttrName)
								listOSAttrValue->RemoveAll()
								listOSAttrValue->Append("NA")
								ThisObject->SetAttributeObject(strOvercoatingBothAttrName, listOSAttrValue)

							}
							if (bOvercoatingHeadTailSideNotEmpty)

							{

								listDisabledValuePointer->Append(strOvercoatingBothAttrName)

							}
							else
							{


								listEnabledValuePointer->Append(strOvercoatingBothAttrName)
							}
						}
						if (listDisabledValuePointer->IndexOf(strOvercoatingHeadAttrName, 1) <= 0)
						{

							listEnabledValuePointer->Append(strOvercoatingHeadAttrName)

						}
						if (listDisabledValuePointer->IndexOf(strOvercoatingTailAttrName, 1) <= 0)
						{
							listEnabledValuePointer->Append(strOvercoatingTailAttrName)
						}
					}
				}
			}
		}
		
		/* Drilling Operation */

		if not(boolFoundEditAttributeId)
		{

			let listDOControllingDisableAttr (List)

			let listDOControllingEnableAttr (List)


			strFSTExtSTUDYInstDrillingOperationPrefix = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_DRILLINGOPERATIONPREFIX"), 2)

			strFSTExtSTUDYInstDrillingOperationAbsHeadType = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_DRILLINGOPERATIONABSHEADTYPE"), 2)
			strFSTExtSTUDYInstDrillingOperationAbsHoleTC = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_DRILLINGOPERATIONABSHOLETC"), 2)
			strFSTExtSTUDYInstDrillingOperationAbsSpot = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_DRILLINGOPERATIONABSSPOT"), 2)
			strFSTExtSTUDYInstDrillingOperationAbsOversize = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_DRILLINGOPERATIONABSOVERSIZE"), 2)

			strFSTExtSTUDYInstDrillingOperationNsaTableSel = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_DRILLINGOPERATIONNSATABLESEL"), 2)
			strFSTExtSTUDYInstFSTType = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_FASTENERTYPE"), 2)
			strFSTExtSTUDYRefDiameter = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDY_ATTR_DIAMETER"), 2)
			strFSTExtDFMRefFSTType = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFM_ATTR_FSTTYPE"), 2)

			
			if( ( strEditAttributeId == strFSTExtSTUDYInstDrillingOperationPrefix )

				OR ( strEditAttributeId == strFSTExtSTUDYInstDrillingOperationAbsHeadType )


				OR ( strEditAttributeId == strFSTExtSTUDYInstDrillingOperationAbsHoleTC )
				OR ( strEditAttributeId == strFSTExtSTUDYInstDrillingOperationAbsSpot )
				OR ( strEditAttributeId == strFSTExtSTUDYInstDrillingOperationAbsOversize )
				OR ( strEditAttributeId == strFSTExtSTUDYInstDrillingOperationNsaTableSel )


				OR ( strEditAttributeId == strFSTExtSTUDYInstFSTType ) )




			{

				boolFoundEditAttributeId = true


				strFSTExtSTUDYInstDrillingOperationConcat = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_STUDYINST_ATTR_DRILLINGOPERATIONCONCAT"), 2)
				Trace (1, ">> Controlling attributes: #,#,#,#,#,#,#,#", strFSTExtSTUDYInstDrillingOperationPrefix, strFSTExtSTUDYInstDrillingOperationAbsHeadType, strFSTExtSTUDYInstDrillingOperationAbsHoleTC, strFSTExtSTUDYInstDrillingOperationAbsSpot, strFSTExtSTUDYInstDrillingOperationAbsOversize, strFSTExtSTUDYInstDrillingOperationNsaMaterial, strFSTExtSTUDYInstDrillingOperationNsaTableSel, strFSTExtSTUDYInstDrillingOperationConcat)

				

				let strFSTExtSTUDYInstDrillingOperationPrefixValue (String)
				let strFSTExtSTUDYInstDrillingOperationAbsHeadTypeValue (String)


				let strFSTExtSTUDYInstDrillingOperationAbsHoleTCValue (String)
				let strFSTExtSTUDYInstDrillingOperationAbsSpotValue (String)
				let strFSTExtSTUDYInstDrillingOperationAbsOversizeValue (String)

				let strFSTExtSTUDYInstDrillingOperationNsaTableSelValue (String)
				
				// Remove description on Table Selection
				if ( strEditAttributeId == strFSTExtSTUDYInstDrillingOperationNsaTableSel )
				{
					strEditAttributeValue = ThisObject->Eurodrone_InstanceMethodsLib::VPMInstance_RemoveDescriptionMono(strEditAttributeId)

				}
				
				strFSTExtSTUDYInstDrillingOperationPrefixValue = ThisObject->GetAttributeString(strFSTExtSTUDYInstDrillingOperationPrefix)
				strFSTExtSTUDYInstDrillingOperationAbsHeadTypeValue = ThisObject->GetAttributeString(strFSTExtSTUDYInstDrillingOperationAbsHeadType)

				strFSTExtSTUDYInstDrillingOperationAbsHoleTCValue = ThisObject->GetAttributeString(strFSTExtSTUDYInstDrillingOperationAbsHoleTC)


				strFSTExtSTUDYInstDrillingOperationAbsSpotValue = ThisObject->GetAttributeString(strFSTExtSTUDYInstDrillingOperationAbsSpot)
				strFSTExtSTUDYInstDrillingOperationAbsOversizeValue = ThisObject->GetAttributeString(strFSTExtSTUDYInstDrillingOperationAbsOversize)
				strFSTExtSTUDYInstDrillingOperationNsaTableSelValue = ThisObject->GetAttributeString(strFSTExtSTUDYInstDrillingOperationNsaTableSel)
				
				/* Recuperation de la Ref - START */
				if ( ( strFSTExtSTUDYInstDrillingOperationPrefixValue == "ABS1707" 
						AND strFSTExtSTUDYInstDrillingOperationAbsHeadTypeValue <> ""
						AND strFSTExtSTUDYInstDrillingOperationAbsHoleTCValue <> ""
						AND strFSTExtSTUDYInstDrillingOperationAbsSpotValue <> "" )

					OR ( strFSTExtSTUDYInstDrillingOperationPrefixValue == "NSA2010" 
						AND strFSTExtSTUDYInstDrillingOperationNsaTableSelValue <> "" ) )
				{
					let strFSTAttrType (String)

			



					strFSTAttrType = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_ATTR_BUSINESSTYPE"), 2)
					strFSTInstRefBusinessType = ""
					realFSTInstRefDiameter = 0.0
					strFSTInstRefFSTType = ""
					listThisFSTInstRefs->RemoveAll()
					listThisFSTInsts->RemoveAll()
					listThisFSTInstRefs = ThisObject->Eurodrone_InstanceMethodsLib::VPMInstance_GetReference(listThisFSTInsts)
					if (listThisFSTInstRefs->Size() == 0)

					{


						Notify ("Unable to retrieve Reference for Instance #.", ThisObject.PLM_ExternalID)
					}

					else
					{
						for objThisFSTInstRef inside listThisFSTInstRefs
						{

							if (strFSTInstRefBusinessType == "")
							{
								strFSTInstRefBusinessType = objThisFSTInstRef->GetAttributeString(strFSTAttrType)
							}
							else if (strFSTInstRefBusinessType <> objThisFSTInstRef->GetAttributeString(strFSTAttrType))

							{

								strFSTInstRefBusinessType = ""
								realFSTInstRefDiameter = 0.0
								strFSTInstRefFSTType = ""

								Notify ("Reference Business Type not unique for Instance #. Please check Instance Title unicity.", ThisObject.PLM_ExternalID)

								break
							}
							if (realFSTInstRefDiameter == 0.0)
							{
								realFSTInstRefDiameter =  objThisFSTInstRef->GetAttributeReal(strFSTExtSTUDYRefDiameter)
							}



							else if (realFSTInstRefDiameter <>  objThisFSTInstRef->GetAttributeReal(strFSTExtSTUDYRefDiameter))
							{
								strFSTInstRefBusinessType = ""


								realFSTInstRefDiameter = 0.0
								strFSTInstRefFSTType = ""

								Notify ("Reference Diameters not unique for Instance #. Please check Instance Title unicity.", ThisObject.PLM_ExternalID)

								break
							}
							if (strFSTInstRefFSTType == "")

							{

								strFSTInstRefFSTType =  objThisFSTInstRef->GetAttributeString(strFSTExtDFMRefFSTType)


							}
							else if (strFSTInstRefFSTType <>  objThisFSTInstRef->GetAttributeString(strFSTExtDFMRefFSTType))
							{
								strFSTInstRefBusinessType = ""

								realFSTInstRefDiameter = 0.0
								strFSTInstRefFSTType = ""
								Notify ("Reference FST Types not unique for Instance #. Please check Instance Title unicity.", ThisObject.PLM_ExternalID)

								break
							}

						}

					}
				}
				// [DataModel] to be added when 'Fastener Diameter' attribute is a Real with LENGTH dimension
				//realFSTInstRefDiameter =  realFSTInstRefDiameter * 1000
				//Notify ("Reference Diameter is #.", realFSTInstRefDiameter)
				/* Recuperation de la Ref - END */
				
				if ( strFSTExtSTUDYInstDrillingOperationPrefixValue == "ABS1707" )

				{
					listDOControllingEnableAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsHeadType)


					listDOControllingEnableAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsHoleTC)


					listDOControllingEnableAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsSpot)
					listDOControllingEnableAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsOversize)
					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationNsaMaterial)
					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationNsaTableSel)
					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationConcat)
					

					if ( strFSTExtSTUDYInstDrillingOperationAbsHeadTypeValue <> ""
						AND strFSTExtSTUDYInstDrillingOperationAbsHoleTCValue <> ""
						AND strFSTExtSTUDYInstDrillingOperationAbsSpotValue <> "" )
					{
						/* Get DIAMETER code - START */
						let strFSTDiamCode (String)
						strFSTDiamCode = ThisObject->Eurodrone_InstanceMethodsLib::VPMInstance_GetFSTDiameterCode(rscFSTSheet, strFSTInstRefBusinessType, realFSTInstRefDiameter, strFSTInstRefFSTType)
						/* Get DIAMETER code - END */
						
						strFSTExtSTUDYInstDrillingOperationConcatValue = strFSTExtSTUDYInstDrillingOperationPrefixValue
						strFSTExtSTUDYInstDrillingOperationConcatValue = strFSTExtSTUDYInstDrillingOperationConcatValue + " " + strFSTDiamCode


						strFSTExtSTUDYInstDrillingOperationConcatValue = strFSTExtSTUDYInstDrillingOperationConcatValue + " " + strFSTExtSTUDYInstDrillingOperationAbsHeadTypeValue
						strFSTExtSTUDYInstDrillingOperationConcatValue = strFSTExtSTUDYInstDrillingOperationConcatValue + " " + strFSTExtSTUDYInstDrillingOperationAbsHoleTCValue


						strFSTExtSTUDYInstDrillingOperationConcatValue = strFSTExtSTUDYInstDrillingOperationConcatValue + " " + strFSTExtSTUDYInstDrillingOperationAbsSpotValue
						if (strFSTExtSTUDYInstDrillingOperationAbsOversizeValue <> "")
						{
							strFSTExtSTUDYInstDrillingOperationConcatValue = strFSTExtSTUDYInstDrillingOperationConcatValue + " " + strFSTExtSTUDYInstDrillingOperationAbsOversizeValue
						}
					}

					else
					{
						strFSTExtSTUDYInstDrillingOperationConcatValue = ""
					}
				}
				else if ( strFSTExtSTUDYInstDrillingOperationPrefixValue == "NSA2010" )
				{



					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsHeadType)
					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsHoleTC)
					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsSpot)
					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsOversize)
					listDOControllingEnableAttr->Append(strFSTExtSTUDYInstDrillingOperationNsaMaterial)
					listDOControllingEnableAttr->Append(strFSTExtSTUDYInstDrillingOperationNsaTableSel)
					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationConcat)
					

					if (strFSTExtSTUDYInstDrillingOperationNsaTableSelValue <> "")
					{



						/* Get DIAMETER code - START */
						let strFSTDiamCode (String)


						strFSTDiamCode = ThisObject->Eurodrone_InstanceMethodsLib::VPMInstance_GetFSTDiameterCode(rscFSTSheet, strFSTInstRefBusinessType, realFSTInstRefDiameter, strFSTInstRefFSTType)
						/* Get DIAMETER code - END */
						
						if (strFSTDiamCode <> "NA")
						{
							strFSTExtSTUDYInstDrillingOperationConcatValue = strFSTExtSTUDYInstDrillingOperationPrefixValue
							strFSTExtSTUDYInstDrillingOperationConcatValue = strFSTExtSTUDYInstDrillingOperationConcatValue + "-" + strFSTDiamCode
						}
						else
						{
							strFSTExtSTUDYInstDrillingOperationConcatValue = ""

						}
					}
					else

					{
						strFSTExtSTUDYInstDrillingOperationConcatValue = ""

					}
				}
				// Modification for N2H-27054: Start
				//else if ( strFSTExtSTUDYInstDrillingOperationPrefixValue == "Manual value" )
				else if ( strFSTExtSTUDYInstDrillingOperationPrefixValue == "Manual value" OR
							strFSTExtSTUDYInstDrillingOperationPrefixValue == "Manual Value" )
				// Modification for N2H-27054: End
				{
					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsHeadType)

					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsHoleTC)
					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsSpot)
					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsOversize)
					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationNsaMaterial)

					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationNsaTableSel)
					listDOControllingEnableAttr->Append(strFSTExtSTUDYInstDrillingOperationConcat)
					if ( strEditAttributeId == strFSTExtSTUDYInstDrillingOperationPrefix )
					{


						strFSTExtSTUDYInstDrillingOperationConcatValue = ""
					}
					else
					{
						strFSTExtSTUDYInstDrillingOperationConcatValue = ThisObject->GetAttributeString(strFSTExtSTUDYInstDrillingOperationConcat)
					}

				}
				else



				{
					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsHeadType)
					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsHoleTC)
					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsSpot)
					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationAbsOversize)
					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationNsaMaterial)
					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationNsaTableSel)
					listDOControllingDisableAttr->Append(strFSTExtSTUDYInstDrillingOperationConcat)
					strFSTExtSTUDYInstDrillingOperationConcatValue = ""

				}
				
				pGenericPointer = ThisObject->GetAttributeValuePointer(strFSTExtSTUDYInstDrillingOperationConcat)
				if ( pGenericPointer <> NULL )
				{
					pGenericPointer.Constant = false
					pGenericPointer->SetValue(strFSTExtSTUDYInstDrillingOperationConcatValue)


					ThisObject->SetAttributeString(strFSTExtSTUDYInstDrillingOperationConcat, strFSTExtSTUDYInstDrillingOperationConcatValue)
				}
			}
			

			if not(boolFoundEditAttributeId)
			{
				strFSTExtDFMInstDrillingOperationPrefix = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_DRILLINGOPERATIONPREFIX"), 2)
				strFSTExtDFMInstDrillingOperationAbsHeadType = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_DRILLINGOPERATIONABSHEADTYPE"), 2)
				strFSTExtDFMInstDrillingOperationAbsHoleTC = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_DRILLINGOPERATIONABSHOLETC"), 2)
				strFSTExtDFMInstDrillingOperationAbsSpot = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_DRILLINGOPERATIONABSSPOT"), 2)
				strFSTExtDFMInstDrillingOperationAbsOversize = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_DRILLINGOPERATIONABSOVERSIZE"), 2)

				strFSTExtDFMInstDrillingOperationNsaTableSel = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_DRILLINGOPERATIONNSATABLESEL"), 2)
				
				if( ( strEditAttributeId == strFSTExtDFMInstDrillingOperationPrefix )
					OR ( strEditAttributeId == strFSTExtDFMInstDrillingOperationAbsHeadType )
					OR ( strEditAttributeId == strFSTExtDFMInstDrillingOperationAbsHoleTC )
					OR ( strEditAttributeId == strFSTExtDFMInstDrillingOperationAbsSpot )
					OR ( strEditAttributeId == strFSTExtDFMInstDrillingOperationAbsOversize )



					OR ( strEditAttributeId == strFSTExtDFMInstDrillingOperationNsaTableSel ) )

				{
					boolFoundEditAttributeId = true
					strFSTExtDFMInstDrillingOperationConcat = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_DRILLINGOPERATIONCONCAT"), 2)
					Trace (1, ">> Controlling attributes: #,#,#,#,#,#,#,#", strFSTExtDFMInstDrillingOperationPrefix, strFSTExtDFMInstDrillingOperationAbsHeadType, strFSTExtDFMInstDrillingOperationAbsHoleTC, strFSTExtDFMInstDrillingOperationAbsSpot, strFSTExtDFMInstDrillingOperationAbsOversize, strFSTExtDFMInstDrillingOperationNsaMaterial, strFSTExtDFMInstDrillingOperationNsaTableSel, strFSTExtDFMInstDrillingOperationConcat)
					

					let strFSTExtDFMInstDrillingOperationPrefixValue (String)
					let strFSTExtDFMInstDrillingOperationAbsHeadTypeValue (String)

					let strFSTExtDFMInstDrillingOperationAbsHoleTCValue (String)

					let strFSTExtDFMInstDrillingOperationAbsSpotValue (String)
					let strFSTExtDFMInstDrillingOperationAbsOversizeValue (String)
					let strFSTExtDFMInstDrillingOperationNsaTableSelValue (String)
					
					// Remove description on Table Selection


					if ( strEditAttributeId == strFSTExtDFMInstDrillingOperationNsaTableSel )
					{
						strEditAttributeValue = ThisObject->Eurodrone_InstanceMethodsLib::VPMInstance_RemoveDescriptionMono(strEditAttributeId)
					}
					
					strFSTExtDFMInstDrillingOperationPrefixValue = ThisObject->GetAttributeString(strFSTExtDFMInstDrillingOperationPrefix)
					strFSTExtDFMInstDrillingOperationAbsHeadTypeValue = ThisObject->GetAttributeString(strFSTExtDFMInstDrillingOperationAbsHeadType)
					strFSTExtDFMInstDrillingOperationAbsHoleTCValue = ThisObject->GetAttributeString(strFSTExtDFMInstDrillingOperationAbsHoleTC)

					strFSTExtDFMInstDrillingOperationAbsSpotValue = ThisObject->GetAttributeString(strFSTExtDFMInstDrillingOperationAbsSpot)
					strFSTExtDFMInstDrillingOperationAbsOversizeValue = ThisObject->GetAttributeString(strFSTExtDFMInstDrillingOperationAbsOversize)
					strFSTExtDFMInstDrillingOperationNsaTableSelValue = ThisObject->GetAttributeString(strFSTExtDFMInstDrillingOperationNsaTableSel)

					
					/* Recuperation de la Ref - START */

					if ( ( strFSTExtDFMInstDrillingOperationPrefixValue == "ABS1707"
							AND strFSTExtDFMInstDrillingOperationAbsHeadTypeValue <> "" AND strFSTExtDFMInstDrillingOperationAbsHeadTypeValue <> "NA"
                            						AND strFSTExtDFMInstDrillingOperationAbsHoleTCValue <> "" AND strFSTExtDFMInstDrillingOperationAbsHoleTCValue <> "NA"
                            						AND strFSTExtDFMInstDrillingOperationAbsSpotValue <> "" AND strFSTExtDFMInstDrillingOperationAbsSpotValue <> "NA" )
						
						OR ( strFSTExtDFMInstDrillingOperationPrefixValue == "NSA2010"
							AND strFSTExtDFMInstDrillingOperationNsaTableSelValue <> "" AND strFSTExtDFMInstDrillingOperationNsaTableSelValue <> "NA" ) )
					{
						let strFSTAttrType (String)
				
						strFSTAttrType = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_ATTR_BUSINESSTYPE"), 2)

						strFSTInstRefBusinessType = ""



						realFSTInstRefDiameter = 0.0
						strFSTInstRefFSTType = ""
						listThisFSTInstRefs->RemoveAll()

						listThisFSTInsts->RemoveAll()
						listThisFSTInstRefs = ThisObject->Eurodrone_InstanceMethodsLib::VPMInstance_GetReference(listThisFSTInsts)
						if (listThisFSTInstRefs->Size() == 0)
						{
							Notify ("Unable to retrieve Reference for Instance #.", ThisObject.PLM_ExternalID)
						}

						else
						{
							for objThisFSTInstRef inside listThisFSTInstRefs
							{
								if (strFSTInstRefBusinessType == "")
								{
									strFSTInstRefBusinessType = objThisFSTInstRef->GetAttributeString(strFSTAttrType)
								}
								else if (strFSTInstRefBusinessType <> objThisFSTInstRef->GetAttributeString(strFSTAttrType))
								{
									strFSTInstRefBusinessType = ""
									realFSTInstRefDiameter = 0.0
									strFSTInstRefFSTType = ""

									Notify ("Reference Business Type not unique for Instance #. Please check Instance Title unicity.", ThisObject.PLM_ExternalID)
									break
								}
								if (realFSTInstRefDiameter == 0.0)
								{
									//realFSTInstRefDiameter =  objThisFSTInstRef->GetAttributeReal(strFSTExtSTUDYRefDiameter)
									realFSTInstRefDiameter =  objThisFSTInstRef->GetAttributeReal("V_Diameter")
								}
								//else if (realFSTInstRefDiameter <>  objThisFSTInstRef->GetAttributeReal(strFSTExtSTUDYRefDiameter))

								else if (realFSTInstRefDiameter <>  objThisFSTInstRef->GetAttributeReal("V_Diameter"))
								{

									strFSTInstRefBusinessType = ""
									realFSTInstRefDiameter = 0.0





									strFSTInstRefFSTType = ""

									Notify ("Reference Diameters not unique for Instance #. Please check Instance Title unicity.", ThisObject.PLM_ExternalID)

									break
								}


								if (strFSTInstRefFSTType == "")
								{

									//strFSTInstRefFSTType =  objThisFSTInstRef->GetAttributeString(strFSTExtDFMRefFSTType)
									strFSTInstRefFSTType =  objThisFSTInstRef->GetAttributeString("V_FastenerType")
								}



								//else if (strFSTInstRefFSTType <>  objThisFSTInstRef->GetAttributeString(strFSTExtDFMRefFSTType))
								else if (strFSTInstRefFSTType <>  objThisFSTInstRef->GetAttributeString("V_FastenerType"))

								{
									strFSTInstRefBusinessType = ""
									realFSTInstRefDiameter = 0.0
									strFSTInstRefFSTType = ""
									Notify ("Reference FST Types not unique for Instance #. Please check Instance Title unicity.", ThisObject.PLM_ExternalID)
									break
								}
							}

						}
					}

					// [DataModel] to be added when 'Fastener Diameter' attribute is a Real with LENGTH dimension
					realFSTInstRefDiameter =  realFSTInstRefDiameter * 1000

					
					strFSTInstRefFSTTypeList = SplitString(strFSTInstRefFSTType, "!")

					if (strFSTInstRefFSTTypeList->Size() > 0)
					{
						strFSTInstRefFSTType = strFSTInstRefFSTTypeList->GetItem(2)

					}


					//Notify ("Reference Diameter is #.", realFSTInstRefDiameter)
					Trace (1, "Reference Diameter is #.", realFSTInstRefDiameter)
					Trace (1, "Reference Fastener type is #.", strFSTInstRefFSTType)
					/* Recuperation de la Ref - END */
					


					if ( strFSTExtDFMInstDrillingOperationPrefixValue == "ABS1707" )
					{

						listDOControllingEnableAttr->Append(strFSTExtDFMInstDrillingOperationAbsHeadType)

						listDOControllingEnableAttr->Append(strFSTExtDFMInstDrillingOperationAbsHoleTC)

						listDOControllingEnableAttr->Append(strFSTExtDFMInstDrillingOperationAbsSpot)
						listDOControllingEnableAttr->Append(strFSTExtDFMInstDrillingOperationAbsOversize)
						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationNsaMaterial)
						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationNsaTableSel)


						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationConcat)

						
						if ( (strFSTExtDFMInstDrillingOperationAbsHeadTypeValue <> "") AND (strFSTExtDFMInstDrillingOperationAbsHeadTypeValue <> "NA")

							AND (strFSTExtDFMInstDrillingOperationAbsHoleTCValue <> "") AND (strFSTExtDFMInstDrillingOperationAbsHoleTCValue <> "NA") 

							AND (strFSTExtDFMInstDrillingOperationAbsSpotValue <> "") AND (strFSTExtDFMInstDrillingOperationAbsSpotValue <> "NA")  )
						{
							/* Get DIAMETER code - START */
							let strFSTDiamCode (String)
							strFSTDiamCode = ThisObject->Eurodrone_InstanceMethodsLib::VPMInstance_GetFSTDiameterCode(rscFSTSheet, strFSTInstRefBusinessType, realFSTInstRefDiameter, strFSTInstRefFSTType)

							Trace (1, "Diameter code is #.", strFSTDiamCode)
							/* Get DIAMETER code - END */
							

							if ( (strFSTDiamCode <> "") AND (strFSTDiamCode <> "NA") )
							{	
								strFSTExtDFMInstDrillingOperationConcatValue = strFSTExtDFMInstDrillingOperationPrefixValue

						                                strFSTExtDFMInstDrillingOperationConcatValue = strFSTExtDFMInstDrillingOperationConcatValue + " " + strFSTDiamCode
						                                strFSTExtDFMInstDrillingOperationConcatValue = strFSTExtDFMInstDrillingOperationConcatValue + " " + strFSTExtDFMInstDrillingOperationAbsHeadTypeValue
						                                strFSTExtDFMInstDrillingOperationConcatValue = strFSTExtDFMInstDrillingOperationConcatValue + " " + strFSTExtDFMInstDrillingOperationAbsHoleTCValue
						                                strFSTExtDFMInstDrillingOperationConcatValue = strFSTExtDFMInstDrillingOperationConcatValue + " " + strFSTExtDFMInstDrillingOperationAbsSpotValue
						                                if (strFSTExtDFMInstDrillingOperationAbsOversizeValue <> "" AND strFSTExtDFMInstDrillingOperationAbsOversizeValue <> "NA")

						                                {
						                                    strFSTExtDFMInstDrillingOperationConcatValue = strFSTExtDFMInstDrillingOperationConcatValue + " " + strFSTExtDFMInstDrillingOperationAbsOversizeValue
						                                }

							}
						}


						else
						{
							strFSTExtDFMInstDrillingOperationConcatValue = ""
						}
					}
					else if ( strFSTExtDFMInstDrillingOperationPrefixValue == "NSA2010" )



					{

						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationAbsHeadType)
						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationAbsHoleTC)
						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationAbsSpot)
						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationAbsOversize)
						listDOControllingEnableAttr->Append(strFSTExtDFMInstDrillingOperationNsaMaterial)




						listDOControllingEnableAttr->Append(strFSTExtDFMInstDrillingOperationNsaTableSel)
						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationConcat)
						
						if (strFSTExtDFMInstDrillingOperationNsaTableSelValue <> "" AND strFSTExtDFMInstDrillingOperationNsaTableSelValue <> "NA")
						{
							/* Get DIAMETER code - START */
							let strFSTDiamCode (String)
							strFSTDiamCode = ThisObject->Eurodrone_InstanceMethodsLib::VPMInstance_GetFSTDiameterCode(rscFSTSheet, strFSTInstRefBusinessType, realFSTInstRefDiameter, strFSTInstRefFSTType)
							Trace (1, "Diameter code is #.", strFSTDiamCode)

							/* Get DIAMETER code - END */
							
							if (strFSTDiamCode <> "NA")

							{


								strFSTExtDFMInstDrillingOperationConcatValue = strFSTExtDFMInstDrillingOperationPrefixValue



								strFSTExtDFMInstDrillingOperationConcatValue = strFSTExtDFMInstDrillingOperationConcatValue + "-" + strFSTDiamCode

							}

							else
							{
								strFSTExtDFMInstDrillingOperationConcatValue = ""
							}


						}
						else
						{

							strFSTExtDFMInstDrillingOperationConcatValue = ""
						}
					}

					// Modification for N2H-27054: Start
					//else if ( strFSTExtDFMInstDrillingOperationPrefixValue == "Manual value" )
					else if ( strFSTExtDFMInstDrillingOperationPrefixValue == "Manual value" OR
								strFSTExtDFMInstDrillingOperationPrefixValue == "Manual Value" )
					// Modification for N2H-27054: End

					{
						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationAbsHeadType)
						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationAbsHoleTC)
						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationAbsSpot)
						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationAbsOversize)

						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationNsaMaterial)
						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationNsaTableSel)
						listDOControllingEnableAttr->Append(strFSTExtDFMInstDrillingOperationConcat)

						if ( strEditAttributeId == strFSTExtDFMInstDrillingOperationPrefix )
						{
							strFSTExtDFMInstDrillingOperationConcatValue = ""
						}


						else

						{



							strFSTExtDFMInstDrillingOperationConcatValue = ThisObject->GetAttributeString(strFSTExtDFMInstDrillingOperationConcat)

						}


					}

					else
					{

						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationAbsHeadType)
						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationAbsHoleTC)

						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationAbsSpot)
						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationAbsOversize)

						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationNsaMaterial)
						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationNsaTableSel)



						listDOControllingDisableAttr->Append(strFSTExtDFMInstDrillingOperationConcat)

						strFSTExtDFMInstDrillingOperationConcatValue = ""
					}
					



					pGenericPointer = ThisObject->GetAttributeValuePointer(strFSTExtDFMInstDrillingOperationConcat)
					if ( pGenericPointer <> NULL )
					{
						pGenericPointer.Constant = false
						pGenericPointer->SetValue(strFSTExtDFMInstDrillingOperationConcatValue)
						ThisObject->SetAttributeString(strFSTExtDFMInstDrillingOperationConcat, strFSTExtDFMInstDrillingOperationConcatValue)

					}

				}

			}
			

			if (boolFoundEditAttributeId)

			{
				intDOControllingAttrCounter = 1
				for intDOControllingAttrCounter while intDOControllingAttrCounter <= listDOControllingDisableAttr->Size() 
				{

					listResetToDefaultValuePointer->Append(listDOControllingDisableAttr[intDOControllingAttrCounter])


					listDisabledValuePointer->Append(listDOControllingDisableAttr[intDOControllingAttrCounter])
				}

				intDOControllingAttrCounter = 1
				for intDOControllingAttrCounter while intDOControllingAttrCounter <= listDOControllingEnableAttr->Size() 
				{

					if (listDisabledValuePointer->IndexOf(listDOControllingEnableAttr[intDOControllingAttrCounter], 1) <= 0)
					{

						listEnabledValuePointer->Append(listDOControllingEnableAttr[intDOControllingAttrCounter])

					}
				}


			}
		}
		
		/* Bonding Information */

		if not(boolFoundEditAttributeId)

		{

			let listBIControllingDisableAttr (List)
			let listBIControllingEnableAttr (List)
			
			strFSTExtDFMInstBonding = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDING"), 2)
			strFSTExtDFMInstBondingProcessCodeBothSide = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPROCESSCODEBOTHSIDE"), 2)
			strFSTExtDFMInstBondingPTBothSide = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPTCODEBOTHSIDE"), 2)
			strFSTExtDFMInstBondingPCMBothSideV1 = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODEBOTHSIDEV1"), 2)
			strFSTExtDFMInstBondingPCMBothSideV2 = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODEBOTHSIDEV2"), 2)
			strFSTExtDFMInstBondingPCMBothSideV3 = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODEBOTHSIDEV3"), 2)
			strFSTExtDFMInstBondingProcessCodeHeadSide = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPROCESSCODEHEADSIDE"), 2)
			strFSTExtDFMInstBondingPTHeadSide = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPTCODEHEADSIDE"), 2)


			strFSTExtDFMInstBondingPCMHeadSideV1 = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODEHEADSIDEV1"), 2)
			strFSTExtDFMInstBondingPCMHeadSideV2 = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODEHEADSIDEV2"), 2)
			strFSTExtDFMInstBondingPCMHeadSideV3 = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODEHEADSIDEV3"), 2)
			strFSTExtDFMInstBondingProcessCodeTailSide = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPROCESSCODETAILSIDE"), 2)

			strFSTExtDFMInstBondingPTTailSide = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPTCODETAILSIDE"), 2)

			strFSTExtDFMInstBondingPCMTailSideV1 = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODETAILSIDEV1"), 2)

			strFSTExtDFMInstBondingPCMTailSideV2 = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODETAILSIDEV2"), 2)

			strFSTExtDFMInstBondingPCMTailSideV3 = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODETAILSIDEV3"), 2)
			
			if( ( strEditAttributeId == strFSTExtDFMInstBonding )
				OR ( strEditAttributeId == strFSTExtDFMInstBondingProcessCodeBothSide )
				OR ( strEditAttributeId == strFSTExtDFMInstBondingPTBothSide )
				OR ( strEditAttributeId == strFSTExtDFMInstBondingPCMBothSideV1 )

				OR ( strEditAttributeId == strFSTExtDFMInstBondingPCMBothSideV2 )

				OR ( strEditAttributeId == strFSTExtDFMInstBondingPCMBothSideV3 )
				OR ( strEditAttributeId == strFSTExtDFMInstBondingProcessCodeHeadSide )
				OR ( strEditAttributeId == strFSTExtDFMInstBondingPTHeadSide )
				OR ( strEditAttributeId == strFSTExtDFMInstBondingPCMHeadSideV1 )
				OR ( strEditAttributeId == strFSTExtDFMInstBondingPCMHeadSideV2 )
				OR ( strEditAttributeId == strFSTExtDFMInstBondingPCMHeadSideV3 )
				OR ( strEditAttributeId == strFSTExtDFMInstBondingProcessCodeTailSide )
				OR ( strEditAttributeId == strFSTExtDFMInstBondingPTTailSide )
				OR ( strEditAttributeId == strFSTExtDFMInstBondingPCMTailSideV1 )
				OR ( strEditAttributeId == strFSTExtDFMInstBondingPCMTailSideV2 )
				OR ( strEditAttributeId == strFSTExtDFMInstBondingPCMTailSideV3 ) )
			{


				boolFoundEditAttributeId = true

				Trace (1, ">> Controlling attributes: #", strEditAttributeId)

				
				strFSTExtDFMInstBondingPCMBothSideConcat = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODEBOTHSIDECONCAT"), 2)

				strFSTExtDFMInstBondingPCMHeadSideConcat = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODEHEADSIDECONCAT"), 2)
				strFSTExtDFMInstBondingPCMTailSideConcat = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_BONDINGPCMCODETAILSIDECONCAT"), 2)
				
				// Remove description on Process Code
				if ( ( strEditAttributeId == strFSTExtDFMInstBondingProcessCodeBothSide )

					OR ( strEditAttributeId == strFSTExtDFMInstBondingProcessCodeHeadSide )
					OR ( strEditAttributeId == strFSTExtDFMInstBondingProcessCodeTailSide ) )
				{

					strEditAttributeValue = ThisObject->Eurodrone_InstanceMethodsLib::VPMInstance_RemoveDescriptionMono(strEditAttributeId)
				}
				


				// Remove description on PT Code
				if ( ( strEditAttributeId == strFSTExtDFMInstBondingPTBothSide )

					OR ( strEditAttributeId == strFSTExtDFMInstBondingPTHeadSide )
					OR ( strEditAttributeId == strFSTExtDFMInstBondingPTTailSide ) )
				{

					listEditAttributeValues = ThisObject->Eurodrone_InstanceMethodsLib::VPMInstance_RemoveDescriptionMulti(strEditAttributeId)


				}


				
				// Bonding true / false
				if (not(ThisObject->GetAttributeBoolean(strFSTExtDFMInstBonding)))
				{

					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideConcat)
					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingProcessCodeBothSide)
					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPTBothSide)
					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV1)

					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV2)


					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV3)
					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideConcat)
					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingProcessCodeHeadSide)
					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPTHeadSide)
					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV1)

					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV2)
					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV3)
					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMTailSideConcat)
					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingProcessCodeTailSide)
					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPTTailSide)
					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV1)






					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV2)
					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV3)
				}

				else
				{
					// Both side
					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideConcat)
					// [DataModel] to be added when 'Process Code Both Side' attribute is a multi-valuated attribute
					listBIAttrValue = ThisObject->GetAttributeObject(strFSTExtDFMInstBondingProcessCodeBothSide)
					// [DataModel] to be added when 'Process Code Both Side' attribute is a mono-valuated attribute
					//listBIAttrValue->RemoveAll()
					//listBIAttrValue->Append(ThisObject->GetAttributeString(strFSTExtDFMInstBondingProcessCodeBothSide))
					boolBIEmptyList = true
					intBIAttrValueCounter = 1
					for intBIAttrValueCounter while intBIAttrValueCounter <= listBIAttrValue->Size()


					{

						if( (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "") AND (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "NA") )
						{
							boolBIEmptyList = false
							intBIAttrValueCounter = listBIAttrValue->Size() + 1

						}
					}

					if (not(boolBIEmptyList))
					{
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingProcessCodeBothSide)

						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTBothSide)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV1)

						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV2)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV3)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingProcessCodeHeadSide)


						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPTHeadSide)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV1)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV2)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV3)

						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingProcessCodeTailSide)


						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPTTailSide)


						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV1)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV2)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV3)
					}

					else
					{
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV1)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV2)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV3)

					}
					listBIAttrValue = ThisObject->GetAttributeObject(strFSTExtDFMInstBondingPTBothSide)
					boolBIEmptyList = true
					intBIAttrValueCounter = 1
					for intBIAttrValueCounter while intBIAttrValueCounter <= listBIAttrValue->Size()
					{
						if ( (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "") AND (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "NA") )
						{

							boolBIEmptyList = false
							intBIAttrValueCounter = listBIAttrValue->Size() + 1
						}
					}
					if (not(boolBIEmptyList))



					{
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTBothSide)
						
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingProcessCodeHeadSide)


						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPTHeadSide)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV1)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV2)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV3)
							
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingProcessCodeTailSide)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPTTailSide)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV1)

						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV2)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV3)
					}
					else
					{
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTHeadSide)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTTailSide)
					}

					if ( ((ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV1) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV1) <> "NA"))
					OR ((ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV2) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV2) <> "NA"))
					OR ((ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV3) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV3) <> "NA")))
					{
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingProcessCodeBothSide)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTBothSide)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV1)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV2)

						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV3)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingProcessCodeHeadSide)

						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPTHeadSide)


						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV1)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV2)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV3)

						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingProcessCodeTailSide)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPTTailSide)

						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV1)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV2)

						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV3)
					}
					else
					{
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingProcessCodeBothSide)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTHeadSide)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTTailSide)

					}


					
					// Head side


					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideConcat)

					// [DataModel] to be added when 'Process Code Head Side' attribute is a multi-valuated attribute
					listBIAttrValue = ThisObject->GetAttributeObject(strFSTExtDFMInstBondingProcessCodeHeadSide)
					// [DataModel] to be added when 'Process Code Head Side' attribute is a mono-valuated attribute
					//listBIAttrValue->RemoveAll()

					//listBIAttrValue->Append(ThisObject->GetAttributeString(strFSTExtDFMInstBondingProcessCodeHeadSide))

					boolBIEmptyList = true
					intBIAttrValueCounter = 1


					for intBIAttrValueCounter while intBIAttrValueCounter <= listBIAttrValue->Size()
					{
						if ( (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "") AND (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "NA") )
						{
							boolBIEmptyList = false

							intBIAttrValueCounter = listBIAttrValue->Size() + 1
						}
					}

					if (not(boolBIEmptyList))

					{
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingProcessCodeBothSide)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPTBothSide)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV1)

						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV2)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV3)

						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingProcessCodeHeadSide)

						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTHeadSide)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV1)


						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV2)

						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV3)


						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingProcessCodeTailSide)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTTailSide)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV1)



						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV2)

						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV3)
					}
					else
					{


						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV1)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV2)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV3)
					}

					listBIAttrValue = ThisObject->GetAttributeObject(strFSTExtDFMInstBondingPTHeadSide)
					boolBIEmptyList = true
					intBIAttrValueCounter = 1

					for intBIAttrValueCounter while intBIAttrValueCounter <= listBIAttrValue->Size()
					{
						if ( (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "") AND (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "NA") )

						{
							boolBIEmptyList = false
							intBIAttrValueCounter = listBIAttrValue->Size() + 1
						}
					}
					if (not(boolBIEmptyList))
					{
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingProcessCodeBothSide)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPTBothSide)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV1)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV2)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV3)
						
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTHeadSide)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTTailSide)

					}
					else
					{
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTBothSide)
					}
					if ( ((ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV1) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV1) <> "NA"))
					OR ((ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV2) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV2) <> "NA"))
					OR ((ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV3) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV3) <> "NA")) )



					{
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingProcessCodeBothSide)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPTBothSide)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV1)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV2)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV3)

						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingProcessCodeHeadSide)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTHeadSide)


						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV1)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV2)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV3)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingProcessCodeTailSide)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTTailSide)



						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV1)

						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV2)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV3)
					}
					else
					{
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTBothSide)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingProcessCodeHeadSide)
					}
					


					// Tail side

					listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMTailSideConcat)
					// [DataModel] to be added when 'Process Code Tail Side' attribute is a multi-valuated attribute
					listBIAttrValue = ThisObject->GetAttributeObject(strFSTExtDFMInstBondingProcessCodeTailSide)

					// [DataModel] to be added when 'Process Code Tail Side' attribute is a mono-valuated attribute

					//listBIAttrValue->RemoveAll()

					//listBIAttrValue->Append(ThisObject->GetAttributeString(strFSTExtDFMInstBondingProcessCodeTailSide))
					boolBIEmptyList = true


					intBIAttrValueCounter = 1
					for intBIAttrValueCounter while intBIAttrValueCounter <= listBIAttrValue->Size()
					{

						if ( (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "") AND (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "NA") )

						{

							boolBIEmptyList = false
							intBIAttrValueCounter = listBIAttrValue->Size() + 1
						}

					}
					if (not(boolBIEmptyList))
					{
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingProcessCodeBothSide)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPTBothSide)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV1)

						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV2)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV3)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingProcessCodeHeadSide)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTHeadSide)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV1)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV2)

						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV3)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingProcessCodeTailSide)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTTailSide)

						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV1)

						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV2)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV3)
					}
					else


					{
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV1)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV2)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV3)
					}
					listBIAttrValue = ThisObject->GetAttributeObject(strFSTExtDFMInstBondingPTTailSide)

					boolBIEmptyList = true
					intBIAttrValueCounter = 1
					for intBIAttrValueCounter while intBIAttrValueCounter <= listBIAttrValue->Size()
					{
						if ( (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "") AND (listBIAttrValue->GetItem(intBIAttrValueCounter) <> "NA") )
						{
							boolBIEmptyList = false
							intBIAttrValueCounter = listBIAttrValue->Size() + 1
						}
					}
					if (not(boolBIEmptyList))
					{
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingProcessCodeBothSide)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPTBothSide)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV1)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV2)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV3)

						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTHeadSide)

						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTTailSide)
					}
					else
					{
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTBothSide)

					}


					if ( ((ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV1) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV1) <> "NA"))
					OR ((ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV2) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV2) <> "NA"))
					OR ((ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV3) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV3) <> "NA")) )
					{
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingProcessCodeBothSide)

						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPTBothSide)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV1)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV2)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingPCMBothSideV3)

						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingProcessCodeHeadSide)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTHeadSide)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV1)


						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV2)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMHeadSideV3)
						listBIControllingDisableAttr->Append(strFSTExtDFMInstBondingProcessCodeTailSide)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTTailSide)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV1)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV2)

						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPCMTailSideV3)
					}
					else
					{
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingPTBothSide)
						listBIControllingEnableAttr->Append(strFSTExtDFMInstBondingProcessCodeTailSide)
					}
				}
				

				//strFSTExtDFMInstBondingPCMBothSideConcatValue = ""
				//strFSTExtDFMInstBondingPCMHeadSideConcatValue = ""
				//strFSTExtDFMInstBondingPCMTailSideConcatValue = ""
				strFSTExtDFMInstBondingPCMBothSideConcatValue = "NA"

				strFSTExtDFMInstBondingPCMHeadSideConcatValue = "NA"
				strFSTExtDFMInstBondingPCMTailSideConcatValue = "NA"

				intBIControllingAttrCounter = 1
				for intBIControllingAttrCounter while intBIControllingAttrCounter <= listBIControllingDisableAttr->Size() 
				{
					pGenericPointer = ThisObject->GetAttributeValuePointer(listBIControllingDisableAttr[intBIControllingAttrCounter])



					if ( pGenericPointer <> NULL )
					{
						pGenericPointer.Constant = false
						if ( (listBIControllingDisableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingPCMBothSideV1)
							OR (listBIControllingDisableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingPCMBothSideV2)
							OR (listBIControllingDisableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingPCMBothSideV3)

							OR (listBIControllingDisableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingPCMHeadSideV1)

							OR (listBIControllingDisableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingPCMHeadSideV2)
							OR (listBIControllingDisableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingPCMHeadSideV3)
							OR (listBIControllingDisableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingPCMTailSideV1)
							OR (listBIControllingDisableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingPCMTailSideV2)
							OR (listBIControllingDisableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingPCMTailSideV3) 
							// [DataModel] to be added when 'Process Code Both Side' attribute is a mono-valuated attribute

							//OR (listBIControllingDisableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingProcessCodeBothSide)

							// [DataModel] to be added when 'Process Code Head Side' attribute is a mono-valuated attribute
							//OR (listBIControllingDisableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingProcessCodeHeadSide)
							// [DataModel] to be added when 'Process Code Tail Side' attribute is a mono-valuated attribute

							//OR (listBIControllingDisableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingProcessCodeTailSide) 
						)

						{




							//pGenericPointer->SetValue("")
							//ThisObject->SetAttributeString(listBIControllingDisableAttr[intBIControllingAttrCounter], "")
							pGenericPointer->SetValue("NA")
							ThisObject->SetAttributeString(listBIControllingDisableAttr[intBIControllingAttrCounter], "NA")
						}
						if ( (listBIControllingDisableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingPTBothSide)
							OR (listBIControllingDisableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingPTHeadSide)
							OR (listBIControllingDisableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingPTTailSide)
							// [DataModel] to be added when 'Process Code Both Side' attribute is a multi-valuated attribute
							OR (listBIControllingDisableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingProcessCodeBothSide)
							// [DataModel] to be added when 'Process Code Head Side' attribute is a multi-valuated attribute
							OR (listBIControllingDisableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingProcessCodeHeadSide)

							// [DataModel] to be added when 'Process Code Tail Side' attribute is a multi-valuated attribute

							OR (listBIControllingDisableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingProcessCodeTailSide)
						)
						{
							listBIAttrValue = ThisObject->GetAttributeObject(listBIControllingDisableAttr[intBIControllingAttrCounter])



							listBIAttrValue->RemoveAll()
							listBIAttrValue->Append("NA")
							ThisObject->SetAttributeObject(listBIControllingDisableAttr[intBIControllingAttrCounter], listBIAttrValue)
						}
						listDisabledValuePointer->Append(listBIControllingDisableAttr[intBIControllingAttrCounter])
					}

				}
				intBIControllingAttrCounter = 1
				for intBIControllingAttrCounter while intBIControllingAttrCounter <= listBIControllingEnableAttr->Size() 
				{
					if (listDisabledValuePointer->IndexOf(listBIControllingEnableAttr[intBIControllingAttrCounter], 1) <= 0)

					{
						listEnabledValuePointer->Append(listBIControllingEnableAttr[intBIControllingAttrCounter])
						if ( (listBIControllingEnableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingPCMBothSideV1)

							AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV1) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV1) <> "NA")
							AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV2) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV2) <> "NA")
							AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV3) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV3) <> "NA") )
						{

							strFSTExtDFMInstBondingPCMBothSideConcatValue = ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV1)
							strFSTExtDFMInstBondingPCMBothSideConcatValue = strFSTExtDFMInstBondingPCMBothSideConcatValue + ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV2)
							strFSTExtDFMInstBondingPCMBothSideConcatValue = strFSTExtDFMInstBondingPCMBothSideConcatValue + ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMBothSideV3)

						}

						else if ( (listBIControllingEnableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingPCMHeadSideV1)

							AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV1) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV1) <> "NA")
							AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV2) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV2) <> "NA")
							AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV3) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV3) <> "NA") )


						{
							strFSTExtDFMInstBondingPCMHeadSideConcatValue = ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV1)
							strFSTExtDFMInstBondingPCMHeadSideConcatValue = strFSTExtDFMInstBondingPCMHeadSideConcatValue + ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV2)

							strFSTExtDFMInstBondingPCMHeadSideConcatValue = strFSTExtDFMInstBondingPCMHeadSideConcatValue + ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMHeadSideV3)
						}
						else if ( (listBIControllingEnableAttr[intBIControllingAttrCounter] == strFSTExtDFMInstBondingPCMTailSideV1)
							AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV1) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV1) <> "NA")
							AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV2) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV2) <> "NA")
							AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV3) <> "") AND (ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV3) <> "NA") )
						{
							strFSTExtDFMInstBondingPCMTailSideConcatValue = ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV1)
							strFSTExtDFMInstBondingPCMTailSideConcatValue = strFSTExtDFMInstBondingPCMTailSideConcatValue + ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV2)
							strFSTExtDFMInstBondingPCMTailSideConcatValue = strFSTExtDFMInstBondingPCMTailSideConcatValue + ThisObject->GetAttributeString(strFSTExtDFMInstBondingPCMTailSideV3)
						}


					}


				}
				pGenericPointer = ThisObject->GetAttributeValuePointer(strFSTExtDFMInstBondingPCMBothSideConcat)

				if ( pGenericPointer <> NULL )
				{

					pGenericPointer.Constant = false
					pGenericPointer->SetValue(strFSTExtDFMInstBondingPCMBothSideConcatValue)
					ThisObject->SetAttributeString(strFSTExtDFMInstBondingPCMBothSideConcat, strFSTExtDFMInstBondingPCMBothSideConcatValue)
					listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMBothSideConcat)
				}

				pGenericPointer = ThisObject->GetAttributeValuePointer(strFSTExtDFMInstBondingPCMHeadSideConcat)
				if ( pGenericPointer <> NULL )

				{
					pGenericPointer.Constant = false


					pGenericPointer->SetValue(strFSTExtDFMInstBondingPCMHeadSideConcatValue)
					ThisObject->SetAttributeString(strFSTExtDFMInstBondingPCMHeadSideConcat, strFSTExtDFMInstBondingPCMHeadSideConcatValue)
					listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMHeadSideConcat)
				}
				pGenericPointer = ThisObject->GetAttributeValuePointer(strFSTExtDFMInstBondingPCMTailSideConcat)


				if ( pGenericPointer <> NULL )

				{

					pGenericPointer.Constant = false
					pGenericPointer->SetValue(strFSTExtDFMInstBondingPCMTailSideConcatValue)
					ThisObject->SetAttributeString(strFSTExtDFMInstBondingPCMTailSideConcat, strFSTExtDFMInstBondingPCMTailSideConcatValue)
					listDisabledValuePointer->Append(strFSTExtDFMInstBondingPCMTailSideConcat)
				}
			}
		}

		
		/* Cleaning Stripping */


		if not(boolFoundEditAttributeId)
		{

			let listCleaningStrippingDisabledValuePointer (List)
			let listCleaningStrippingEnableValuePointer (List)
			let idxCleaningStripping (Integer)


			
			strCleaningStrippingAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_CLEANINGSTRIPPING"), 2)
			strCleaningStrippingBothAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_CLEANINGSTRIPPINGBOTHSIDE"), 2)

			strCleaningStrippingHeadAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_CLEANINGSTRIPPINGHEADSIDE"), 2)
			strCleaningStrippingTailAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_CLEANINGSTRIPPINGTAILSIDE"), 2)

			if( ( strEditAttributeId == strCleaningStrippingAttrName )

				OR ( strEditAttributeId == strCleaningStrippingBothAttrName )
				OR ( strEditAttributeId == strCleaningStrippingHeadAttrName )
				OR ( strEditAttributeId == strCleaningStrippingTailAttrName ) )
			{

				boolFoundEditAttributeId = true
				if (ThisObject->GetAttributeBoolean(strCleaningStrippingAttrName) == false)
				{
					listCleaningStrippingDisabledValuePointer->Append(strCleaningStrippingBothAttrName)
					listCleaningStrippingDisabledValuePointer->Append(strCleaningStrippingHeadAttrName)

					listCleaningStrippingDisabledValuePointer->Append(strCleaningStrippingTailAttrName)
				}
				else if ( ("" <> ThisObject->GetAttributeString(strCleaningStrippingBothAttrName)) AND ("NA" <> ThisObject->GetAttributeString(strCleaningStrippingBothAttrName)) )
				{
					listCleaningStrippingEnableValuePointer->Append(strCleaningStrippingBothAttrName)
					listCleaningStrippingDisabledValuePointer->Append(strCleaningStrippingHeadAttrName)
					listCleaningStrippingDisabledValuePointer->Append(strCleaningStrippingTailAttrName)
				}

				else if ( ( ("" <> ThisObject->GetAttributeString(strCleaningStrippingHeadAttrName)) AND ("NA" <> ThisObject->GetAttributeString(strCleaningStrippingHeadAttrName)) )
					OR ( ("" <> ThisObject->GetAttributeString(strCleaningStrippingTailAttrName)) AND ("NA" <> ThisObject->GetAttributeString(strCleaningStrippingTailAttrName)) ) )
				{
					listCleaningStrippingDisabledValuePointer->Append(strCleaningStrippingBothAttrName)
					listCleaningStrippingEnableValuePointer->Append(strCleaningStrippingHeadAttrName)
					listCleaningStrippingEnableValuePointer->Append(strCleaningStrippingTailAttrName)
				}

				else
				{
					listCleaningStrippingEnableValuePointer->Append(strCleaningStrippingBothAttrName)



					listCleaningStrippingEnableValuePointer->Append(strCleaningStrippingHeadAttrName)


					listCleaningStrippingEnableValuePointer->Append(strCleaningStrippingTailAttrName)

				}
				
				// disable combobox
				idxCleaningStripping = 1
				for idxCleaningStripping while idxCleaningStripping <= listCleaningStrippingDisabledValuePointer->Size()
				{
					listResetToDefaultValuePointer->Append(listCleaningStrippingDisabledValuePointer->GetItem(idxCleaningStripping))
					listDisabledValuePointer->Append(listCleaningStrippingDisabledValuePointer->GetItem(idxCleaningStripping))


				}
				
				// enable combobox

				idxCleaningStripping = 1
				for idxCleaningStripping while idxCleaningStripping <= listCleaningStrippingEnableValuePointer->Size()

				{

					if (listDisabledValuePointer->IndexOf(listCleaningStrippingEnableValuePointer->GetItem(idxCleaningStripping), 1) <= 0)
					{
						listEnabledValuePointer->Append(listCleaningStrippingEnableValuePointer->GetItem(idxCleaningStripping))
					}
				}
			}

		}
		
		/* Torque */
/* 		if not(boolFoundEditAttributeId)
		{

			strFSTExtDFMInstTorqueValue = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_TORQUEVALUE"), 2)
			strFSTExtDFMInstTorqueSpecificValueNominal = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_TORQUESPECIFICVALUENOMINAL"), 2)

			strFSTExtDFMInstTorqueSpecificValueTol = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_TORQUESPECIFICVALUETOL"), 2)


			strFSTExtDFMInstTorqueSpecificValueConcat = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_TORQUESPECIFICVALUECONCAT"), 2)
			
			if( ( strEditAttributeId == strFSTExtDFMInstTorqueValue )
				OR ( strEditAttributeId == strFSTExtDFMInstTorqueSpecificValueNominal )


				OR ( strEditAttributeId == strFSTExtDFMInstTorqueSpecificValueTol ) )


			{


				


					if (("HEAD" <> ThisObject->GetAttributeString(strFSTExtDFMInstTorqueValue)) AND ("TAIL" <> ThisObject->GetAttributeString(strFSTExtDFMInstTorqueValue)))

				{
					pGenericPointer = ThisObject->GetAttributeValuePointer(strFSTExtDFMInstTorqueSpecificValueNominal)
					if ( pGenericPointer <> NULL )

					{
						pGenericPointer.Constant = false

						// [DataModel] to be added when 'Torque Nominal Value' attribute is a Real with TORQUE dimension
						//pGenericPointer->SetValue(0.0 * 1Nxm)
						//ThisObject->SetAttributeReal(strFSTExtDFMInstTorqueSpecificValueNominal, 0.0)
						// [DataModel] to be added when 'Torque Nominal Value' attribute is a String
						pGenericPointer->SetValue("")
						ThisObject->SetAttributeString(strFSTExtDFMInstTorqueSpecificValueNominal, "")
						listDisabledValuePointer->Append(strFSTExtDFMInstTorqueSpecificValueNominal)

					}
					pGenericPointer = ThisObject->GetAttributeValuePointer(strFSTExtDFMInstTorqueSpecificValueTol)

					if ( pGenericPointer <> NULL )
					{

						pGenericPointer.Constant = false


						// [DataModel] to be added when 'Torque Tolerance Value' attribute is a Real
						//pGenericPointer->SetValue(0.0)

						//ThisObject->SetAttributeReal(strFSTExtDFMInstTorqueSpecificValueTol, 0.0)





						// [DataModel] to be added when 'Torque Tolerance Value' attribute is a String
						pGenericPointer->SetValue("")
						ThisObject->SetAttributeString(strFSTExtDFMInstTorqueSpecificValueTol, "")
						listDisabledValuePointer->Append(strFSTExtDFMInstTorqueSpecificValueTol)

					}
					pGenericPointer = ThisObject->GetAttributeValuePointer(strFSTExtDFMInstTorqueSpecificValueConcat)
					if ( pGenericPointer <> NULL )
					{

						pGenericPointer.Constant = false

						pGenericPointer->SetValue("")

						ThisObject->SetAttributeString(strFSTExtDFMInstTorqueSpecificValueConcat, "")


						listDisabledValuePointer->Append(strFSTExtDFMInstTorqueSpecificValueConcat)
					}
				}
				else
				{
					if (listDisabledValuePointer->IndexOf(strFSTExtDFMInstTorqueSpecificValueNominal, 1) <= 0)
					{

						listEnabledValuePointer->Append(strFSTExtDFMInstTorqueSpecificValueNominal)

					}
					if (listDisabledValuePointer->IndexOf(strFSTExtDFMInstTorqueSpecificValueTol, 1) <= 0)
					{
						listEnabledValuePointer->Append(strFSTExtDFMInstTorqueSpecificValueTol)
					}
					pGenericPointer = ThisObject->GetAttributeValuePointer(strFSTExtDFMInstTorqueSpecificValueConcat)

					if ( pGenericPointer <> NULL )
					{



						// [DataModel] to be added when 'Torque Nominal Value' attribute is a Real with TORQUE dimension
						//realFSTExtDFMInstTorqueSpecificValueNominalValue = ThisObject->GetAttributeReal(strFSTExtDFMInstTorqueSpecificValueNominal)
						//strFSTExtDFMInstTorqueSpecificValueNominalValue = ToString(realFSTExtDFMInstTorqueSpecificValueNominalValue)
						// [DataModel] to be added when 'Torque Nominal Value' attribute is a String
						strFSTExtDFMInstTorqueSpecificValueNominalValue = ThisObject->GetAttributeString(strFSTExtDFMInstTorqueSpecificValueNominal)
						// [DataModel] to be added when 'Torque Tolerance Value' attribute is a Real
						//realFSTExtDFMInstTorqueSpecificValueTolValue = ThisObject->GetAttributeReal(strFSTExtDFMInstTorqueSpecificValueTol)


						//strFSTExtDFMInstTorqueSpecificValueTolValue = ToString(realFSTExtDFMInstTorqueSpecificValueTolValue)
						// [DataModel] to be added when 'Torque Tolerance Value' attribute is a String
						strFSTExtDFMInstTorqueSpecificValueTolValue = ThisObject->GetAttributeString(strFSTExtDFMInstTorqueSpecificValueTol)
						
						if (strFSTExtDFMInstTorqueSpecificValueNominalValue <> "")
						{
							strFSTExtDFMInstTorqueSpecificValueConcatValue = strFSTExtDFMInstTorqueSpecificValueNominalValue

							if (strFSTExtDFMInstTorqueSpecificValueTolValue <> "")
							{
								strFSTExtDFMInstTorqueSpecificValueConcatValue = strFSTExtDFMInstTorqueSpecificValueConcatValue + " +/-"
								strFSTExtDFMInstTorqueSpecificValueConcatValue = strFSTExtDFMInstTorqueSpecificValueConcatValue + strFSTExtDFMInstTorqueSpecificValueTolValue

							}
							strFSTExtDFMInstTorqueSpecificValueConcatValue = strFSTExtDFMInstTorqueSpecificValueConcatValue + " N.m"
						}
						else

						{
							strFSTExtDFMInstTorqueSpecificValueConcatValue = ""
						}
						pGenericPointer.Constant = false

						pGenericPointer->SetValue(strFSTExtDFMInstTorqueSpecificValueConcatValue)
						ThisObject->SetAttributeString(strFSTExtDFMInstTorqueSpecificValueConcat, strFSTExtDFMInstTorqueSpecificValueConcatValue)
						listDisabledValuePointer->Append(strFSTExtDFMInstTorqueSpecificValueConcat)
					}
				}
			}


		} */
		




		/* Attributes controlling other attributes enable/disable */
		let boolControllingAttr (Boolean)
		
		strFSTExtDFMInstControllingAttr = "AIRBUS_E_FST_INSTANCE_DFM_FSTOVERCOATING,AIRBUS_E_FST_INSTANCE_DFM_FSTOVERCOATINGHEADSIDE,AIRBUS_E_FST_INSTANCE_DFM_FSTOVERCOATINGTAILSIDE|AIRBUS_E_FST_INSTANCE_DFM_FSTBONDING,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPROCESSCODEBOTHSIDE,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPTCODEBOTHSIDE,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODEBOTHSIDEV1,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODEBOTHSIDEV2,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODEBOTHSIDEV3,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODEBOTHSIDECONCAT,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPROCESSCODEHEADSIDE,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPTCODEHEADSIDE,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODEHEADSIDEV1,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODEHEADSIDEV2,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODEHEADSIDEV3,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODEHEADSIDECONCAT,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPROCESSCODETAILSIDE,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPTCODETAILSIDE,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODETAILSIDEV1,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODETAILSIDEV2,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODETAILSIDEV3,AIRBUS_E_FST_INSTANCE_DFM_FSTBONDINGPCMCODETAILSIDECONCAT|AIRBUS_E_FST_INSTANCE_DFM_FSTCLEANINGSTRIPPING,AIRBUS_E_FST_INSTANCE_DFM_FSTCLEANINGSTRIPPINGBOTHSIDE,AIRBUS_E_FST_INSTANCE_DFM_FSTCLEANINGSTRIPPINGHEADSIDE,AIRBUS_E_FST_INSTANCE_DFM_FSTCLEANINGSTRIPPINGTAILSIDE"
		//strFSTExtDFMInstControllingAttr = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_CONTROLLING_ATTR"), 2)
		listFSTExtDFMInstControllingAttr = SplitString(strFSTExtDFMInstControllingAttr, "|")

		intControllingAttr = 1
		for intControllingAttr while intControllingAttr <= listFSTExtDFMInstControllingAttr->Size() 
		{
			strControllingAttr = listFSTExtDFMInstControllingAttr[intControllingAttr]
			Trace (1, ">> Controlling attributes # / #: #", intControllingAttr, listFSTExtDFMInstControllingAttr->Size(), strControllingAttr)

			

			listControllingAttr = SplitString(strControllingAttr, ",")
			if ( (listControllingAttr <> NULL) AND (listControllingAttr->Size() > 1) )

			{
				if( strEditAttributeId == listControllingAttr[1] )
				{
					boolControllingAttr = true

					if ( ThisObject->GetAttributeBoolean(listControllingAttr[1]) == true )
					{
						boolControllingAttr = false
					}

					intControllingAttrCounter = 2
					for intControllingAttrCounter while intControllingAttrCounter <= listControllingAttr->Size() 
					{
						if ( boolControllingAttr OR (listDisabledValuePointer->IndexOf(listControllingAttr[intControllingAttrCounter], 1) <= 0) )

						{


							if (boolControllingAttr)
							{

								listDisabledValuePointer->Append(listControllingAttr[intControllingAttrCounter])

							}


							else
							{
								listEnabledValuePointer->Append(listControllingAttr[intControllingAttrCounter])

							}


						}



					}

					intControllingAttr = listFSTExtDFMInstControllingAttr->Size() + 1
				}
			}
		}
		
		/* List of Attributes */
		if ( extAttrValuesFileSheet <> NULL )

		{
			idxAttrsRow = 1
			for idxAttrsRow while idxAttrsRow < extAttrValuesFileSheet.RowsNb
			{
				strAttrName = extAttrValuesFileSheet->CellAsString(idxAttrsRow, idxAttrsNamesCol)
				strAttrValuesDocument = extAttrValuesFileSheet->CellAsString(idxAttrsRow, idxAttrsValuesDocumentCol)

				strAttrComboboxType = extAttrValuesFileSheet->CellAsString(idxAttrsRow, idxAttrsComboboxTypeCol)

				strAttrShowDescription = extAttrValuesFileSheet->CellAsString(idxAttrsRow, idxAttrsShowDescriptionCol)
				strAttrMultiValue = extAttrValuesFileSheet->CellAsString(idxAttrsRow, idxAttrsMultiValueCol)
				
				if ( ("" <> strAttrName) AND (NULL <> strAttrName) 
					AND (listEnabledValuePointer->IndexOf(strAttrName, 1) > 0)	
					AND (listDisabledValuePointer->IndexOf(strAttrName, 1) <= 0)
					AND ("" <> strAttrValuesDocument) AND (NULL <> strAttrValuesDocument) 
					AND ("" <> strAttrComboboxType) AND (NULL <> strAttrComboboxType) )

				{
					list_Attributesfor_Combobox->Append(strAttrName)
					list_AttrValuesDocumentsfor_Combobox->Append(strAttrValuesDocument)


					list_AttrComboboxTypesfor_Combobox->Append(strAttrComboboxType)
					list_AttrShowDescriptionsfor_Combobox->Append(strAttrShowDescription)
					list_AttrMultiValuesfor_Combobox->Append(strAttrMultiValue)

				}
			}

		}
		
		/* Combobox for Dependency Attributes */
		strDepAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_INSTALLATION"), 2)

		if( strEditAttributeId == strDepAttrName 
			AND (listDisabledValuePointer->IndexOf(strAttrName, 1) <= 0) )

		{


			strAttrName = rscFSTSheet->CellAsString(rscFSTSheet->LocateInColumn(1, "FST_EXT_DFMINST_ATTR_INSTALLATIONPTCODE"), 2)
			
			if ("DRY" == ThisObject->GetAttributeString(strDepAttrName))
			{
				listDisabledValuePointer->Append(strAttrName)
			}

			else
			{
				list_DependingAttributes->Append(strDepAttrName)
				list_DepAttributesfor_Combobox->Append(strAttrName)


				list_DepAttrValuesDocumentsfor_Combobox->Append("Eurodrone_FST_INSTANCE_INSTALLATIONPTCODE_Values")

				list_DepAttrShowDescriptionsfor_Combobox->Append("1")

				list_DepAttrMultiValuesfor_Combobox->Append("1")
			}

		}
		
	}


	/* Value Pointers to Enable */


	let strValuePointerToEnable (String)
	let lFilter(List)

	listEnabledValuePointer->RemoveDuplicates()

	for strValuePointerToEnable inside listEnabledValuePointer
	{
		pGenericPointer = ThisObject->GetAttributeValuePointer(strValuePointerToEnable)
		if ( pGenericPointer <> NULL )
		{
			list_ListValuefor_Attr = pGenericPointer.AuthorizedValues
			pGenericPointer.Constant = false
		}
	}

	/* List of Attributes */
	idxAttr = 1



	idxAttrValuesCol = 1
	idxAttrDefaultValueCol = 2
	idxAttrDescriptionsCol = 3
	for idxAttr while idxAttr <= list_Attributesfor_Combobox->Size()
	{
		strAttrName = list_Attributesfor_Combobox->GetItem(idxAttr)
		strAttrValuesDocument = list_AttrValuesDocumentsfor_Combobox->GetItem(idxAttr)
		strAttrComboboxType = list_AttrComboboxTypesfor_Combobox->GetItem(idxAttr)

		strAttrShowDescription = list_AttrShowDescriptionsfor_Combobox->GetItem(idxAttr)
		strAttrMultiValue = list_AttrMultiValuesfor_Combobox->GetItem(idxAttr)

		idxAttrRow = 1
		pAttr = ThisObject->GetAttributeValuePointer(strAttrName)
		list_ListValuefor_Attr->RemoveAll()


		//list_ListValuefor_Attr = pAttr.AuthorizedValues


		



		if (list_ListValuefor_Attr->Size() == 0)
		{

			list_ListValuefor_Attr->Append(strAttrComboboxType)
			
			idxExtFileSheet = listExtFileSheetNames->IndexOf(strAttrValuesDocument, 1)

			// Added for N2H-26150: START
			if (strAttrValuesDocument == "Eurodrone_FST_INSTANCE_DRILLINGOPERATION_Values" OR strAttrValuesDocument == "Eurodrone_FST_INSTANCE_BONDINGPCMCODEP_Values" OR 
					strAttrValuesDocument == "Eurodrone_FST_INSTANCE_BONDINGPCMCODEC_Values" OR strAttrValuesDocument == "Eurodrone_FST_INSTANCE_BONDINGPCMCODEM_Values" OR
					strAttrValuesDocument == "Eurodrone_FST_INSTANCE_BONDINGPROCESSCODE_Values" OR strAttrValuesDocument == "Eurodrone_FST_INSTANCE_BONDINGPTCODE_Values" OR
					strAttrValuesDocument == "Eurodrone_FST_INSTANCE_DRILLINGOPERATIONABSHEADTYPE_Values" OR strAttrValuesDocument == "Eurodrone_FST_INSTANCE_DRILLINGOPERATIONABSHOLETC_Values" OR
					strAttrValuesDocument == "Eurodrone_FST_INSTANCE_DRILLINGOPERATIONABSOVERSIZE_Values" OR strAttrValuesDocument == "Eurodrone_FST_INSTANCE_DRILLINGOPERATIONABSSPO_Values" OR
					strAttrValuesDocument == "Eurodrone_FST_INSTANCE_HEADSIDE_Values" OR strAttrValuesDocument == "Eurodrone_FST_INSTANCE_INSTALLATIONPTCODE_Values" OR
					strAttrValuesDocument == "Eurodrone_FST_INSTANCE_INSTALLCONDITION_Values")
			{
				Eurodrone_Util::UseExternalFile(strAttrValuesDocument,extFileSheet,lFilter)
			}
			
			if (extFileSheet == NULL)
			{
				if (idxExtFileSheet > 0)
	
				{
					extFileSheet = listExtFileSheets->GetItem(idxExtFileSheet)
				}
				else 
	
				{
					extFileSheet = CreateSheet( "KnowledgeResources|"+ strAttrValuesDocument )
					listExtFileSheetNames->Append(strAttrValuesDocument)
					listExtFileSheets->Append(extFileSheet)
				}
			}
			// Added for N2H-26150: END

			if ( extFileSheet <> NULL )
			{
				for idxAttrRow while idxAttrRow < extFileSheet.RowsNb

				{
					// Added for N2H-26150: START
					strObsolete = ""
					idxAttrObsoleteCol = extFileSheet->LocateInRow(1, "Obsolete")
					if (idxAttrObsoleteCol <> 0)
					{
						strObsolete = extFileSheet->CellAsString(idxAttrRow, idxAttrObsoleteCol)
					}
					if (strObsolete <> "" AND strObsolete == "Yes")
					{
						continue
					}
					// Added for N2H-26150: END
					strValue = extFileSheet->CellAsString(idxAttrRow, idxAttrValuesCol)
					strValueNoDesc = strValue
					if (strAttrShowDescription == "1")
					{
						strDescription = extFileSheet->CellAsString(idxAttrRow, idxAttrDescriptionsCol)
						if (strDescription <> NULL AND strDescription <> "")

						{

							strValue = strValue + " | " + strDescription


							if ( (pAttr <> NULL) 

								AND (strAttrMultiValue <> "1")

								AND  (ThisObject->GetAttributeString(strAttrName) == strValueNoDesc) )
							{
								pAttr->SetValue(strValue)
							}
						}
					}
					list_ListValuefor_Attr->Append(strValue)

					if (ThisObject->HasAttribute(strAttrName))

					{
						if ( ( (ThisObject->GetAttributeString(strAttrName) == "") OR (ThisObject->GetAttributeString(strAttrName) == NULL) ) AND ( "1" == extFileSheet->CellAsString(idxAttrRow, idxAttrDefaultValueCol) ) )
						{
							// Default value for combobox
							if (strAttrMultiValue == "1")

							{
					

								set list_ListValuefor_Attr_default = ThisObject.GetAttributeObject(strAttrName)
								if (list_ListValuefor_Attr_default.Size() == 0){
									list_ListValuefor_Attr_default.Append(strValueNoDesc)
									ThisObject.SetAttributeObject(strAttrName, list_ListValuefor_Attr_default)
								}
							}
							else
							{
								ThisObject->SetAttributeString(strAttrName, strValue)
							}
							//ThisObject->SetAttributeString(strAttrName, strValue)
						}
				
					}
				}
			}
			if (2 < list_ListValuefor_Attr->Size()) 

			{

				if (pAttr <> NULL) 
				{
					pAttr.Constant = false

					pAttr.AuthorizedValues = list_ListValuefor_Attr
				}

			}
		}
		if (1 == list_ListValuefor_Attr->Size())
		{
			if (strAttrComboboxType == "AuthorizedValues")
			{
				listDisabledValuePointer->Append(strAttrName)
			}



			else

			{
				if (pAttr <> NULL) 
				{
					pAttr.Constant = false
					pAttr.AuthorizedValues = list_ListValuefor_Attr
				}

			}

		}
		else if (2 == list_ListValuefor_Attr->Size()) 
		{
			if (ThisObject->HasAttribute(strAttrName))



			{
				if ( (ThisObject->GetAttributeString(strAttrName) == "") OR (ThisObject->GetAttributeString(strAttrName) == NULL) OR (ThisObject->GetAttributeString(strAttrName) == list_ListValuefor_Attr->GetItem(2)) ) 
				{

					ThisObject->SetAttributeString(strAttrName, list_ListValuefor_Attr->GetItem(2))
					if (strAttrComboboxType == "AuthorizedValues")
					{

						listDisabledValuePointer->Append(strAttrName)
					}
					else
					{

						if (pAttr <> NULL) 
						{

							pAttr.Constant = false

							pAttr.AuthorizedValues = list_ListValuefor_Attr
						}
					}
				}

			}

		}

	}

	/* Combobox for Dependency Attributes */
	let idxDepAttrValuesCol (Integer)
	let strDepValue (String)



	idxAttr = 1
	idxDepAttrValuesCol = 1
	idxAttrValuesCol = 2

	idxAttrDefaultValueCol = 3
	idxAttrDescriptionsCol = 4
	for idxAttr while idxAttr <= list_DepAttributesfor_Combobox->Size()
	{
		strAttrName = list_DepAttributesfor_Combobox->GetItem(idxAttr)


		strAttrValuesDocument = list_DepAttrValuesDocumentsfor_Combobox->GetItem(idxAttr)
		strAttrComboboxType = list_DepAttrComboboxTypesfor_Combobox->GetItem(idxAttr)
		strAttrShowDescription = list_DepAttrShowDescriptionsfor_Combobox->GetItem(idxAttr)
		strAttrMultiValue = list_DepAttrMultiValuesfor_Combobox->GetItem(idxAttr)
		strDepAttrName = list_DependingAttributes->GetItem(idxAttr)
		strDepAttrValue = ""
		if (ThisObject->HasAttribute(strDepAttrName))

		{
			strDepAttrValue = ThisObject->GetAttributeString(strDepAttrName)



		}
		pAttr = ThisObject->GetAttributeValuePointer(strAttrName)
		list_ListValuefor_Attr->RemoveAll()
		list_ListValuefor_Attr->Append(strAttrComboboxType)
		
		idxExtFileSheet = listExtFileSheetNames->IndexOf(strAttrValuesDocument, 1)
		if (idxExtFileSheet > 0)
		{
			extFileSheet = listExtFileSheets->GetItem(idxExtFileSheet)
		}

		else 
		{
			// Added for N2H-27054: Start
			//extFileSheet = CreateSheet( "KnowledgeResources|"+ strAttrValuesDocument )
			Eurodrone_Util::UseExternalFile(strAttrValuesDocument,extFileSheet,lFilter)
			// Added for N2H-27054: End
			listExtFileSheetNames->Append(strAttrValuesDocument)
			listExtFileSheets->Append(extFileSheet)
		}
		if ( extFileSheet <> NULL )
		{
			idxAttrRow = 1
			for idxAttrRow while idxAttrRow < extFileSheet.RowsNb
			{
				strDepValue = extFileSheet->CellAsString(idxAttrRow, idxDepAttrValuesCol)
				if (strDepValue == strDepAttrValue)
				{
					strValue = extFileSheet->CellAsString(idxAttrRow, idxAttrValuesCol)
					strValueNoDesc = strValue
					if (strAttrShowDescription == "1")
					{
						strDescription = extFileSheet->CellAsString(idxAttrRow, idxAttrDescriptionsCol)
						if (strDescription <> NULL AND strDescription <> "")
						{
							strValue = strValue + " | " + strDescription
							if ( (pAttr <> NULL) 
								AND (strAttrMultiValue <> "1")
								AND  (ThisObject->GetAttributeString(strAttrName) == strValueNoDesc) )
							{
								pAttr->SetValue(strValue)
							}
						}
					}

					list_ListValuefor_Attr->Append(strValue)
				}
			}
		}
		
		if (1 == list_ListValuefor_Attr->Size())
		{
			if (pAttr <> NULL) 
			{
				pAttr.Constant = false


				pAttr->SetValue(listEmptyList)
				if (strAttrComboboxType == "AuthorizedValues")
				{
					pAttr.AuthorizedValues->RemoveAll()
					listDisabledValuePointer->Append(strAttrName)
				}
				else

				{
					pAttr.AuthorizedValues = list_ListValuefor_Attr
				}
			}
		}
		else
		{
			if (pAttr <> NULL) 

			{
				pAttr.Constant = false
				pAttr.AuthorizedValues = list_ListValuefor_Attr
			}
		}
	}

	/* Value Pointers to Reset To Default */

	let intResetToDefault (Integer)
	let intAttrValuesRow(Integer)
	let intAttrDefaultValueRow(Integer)
	let strAttrDefaultValue(String)


	intResetToDefault = 1



	for intResetToDefault while intResetToDefault <= listResetToDefaultValuePointer->Size() 
	{
		strAttrName = listResetToDefaultValuePointer->GetItem(intResetToDefault)
		pGenericPointer = ThisObject->GetAttributeValuePointer(strAttrName)
		if ( pGenericPointer <> NULL )
		{
			pGenericPointer.Constant = false

			if ( extAttrValuesFileSheet <> NULL )
			{
				intAttrValuesRow = extAttrValuesFileSheet->LocateInColumn(1, strAttrName)

				if (intAttrValuesRow > 0)
				{
					strAttrValuesDocument = extAttrValuesFileSheet->CellAsString(intAttrValuesRow, 2)
					idxExtFileSheet = listExtFileSheetNames->IndexOf(strAttrValuesDocument, 1)
					if (idxExtFileSheet > 0)
					{
						extFileSheet = listExtFileSheets->GetItem(idxExtFileSheet)
					}



					else 

					{
						extFileSheet = CreateSheet( "KnowledgeResources|"+ strAttrValuesDocument )

						listExtFileSheetNames->Append(strAttrValuesDocument)


						listExtFileSheets->Append(extFileSheet)
					}
					intAttrDefaultValueRow = extFileSheet->LocateInColumn(2, "1")
					if (intAttrDefaultValueRow > 0)
					{

						strAttrDefaultValue = extFileSheet->CellAsString(intAttrDefaultValueRow, 1)
						pGenericPointer->SetValue(strAttrDefaultValue)
						ThisObject->SetAttributeString(strAttrName, strAttrDefaultValue)

					}
				}
			}
		}
	}

}
//Added for N2H-15751:Starts
pAttrOvercoat->AuthorizedValues = ListOvercoating
pAttrOvercoatHead->AuthorizedValues = ListOvercoating
pAttrOvercoatTail->AuthorizedValues = ListOvercoating
Trace(1,"Overcoating Attributes Set")
//Added for N2H-15751;Ends

/* Value Pointers to Disable */
let strValuePointerToDisable (String)

//N2H-16817:Flexible Fastener Instance :Starts
if(ThisObject->IsASortOf("PLMFst_FlexibleFastenerInstance"))
{
	Trace(1,"Adding For Fasteners")
	if(ThisObject->HasAttribute("PLM_ExternalID"))
	{

		Trace(1,"Disabling Instance Title for Fasteners")
		listDisabledValuePointer->Append("PLM_ExternalID")
	}

	if(ThisObject->HasAttribute("AIRBUS_E_Instance_EPASSY_InstanceStatus"))
	{
		Trace(1,"Disabling Instance Status for Fasteners")
		listDisabledValuePointer->Append("AIRBUS_E_Instance_EPASSY_InstanceStatus")			
	}
	//N2H-16835:Added for Torque Customization :Starts
	if((ThisObject->HasAttribute("AIRBUS_E_DEXT_TECHNICAL_INFORMATION_Action")==false) OR (ThisObject->HasAttribute("AIRBUS_E_DEXT_TECHNICAL_INFORMATION_Action") AND (ThisObject->GetAttributeString("AIRBUS_E_DEXT_TECHNICAL_INFORMATION_Action") <> "SYM")))
    	{
	    Trace(1,"This Not a symmetry object")
		Let vTorqueValue(ValuePointer)
		Let vTorqueNominalValue(ValuePointer)
		Let vTorqueMaxValue(ValuePointer)
		Let vTorqueMinValue(ValuePointer)
		Let torqueValueSheet(DTSheetType)

		Let listTorqueValues(List)
		Let temp(String)

		Let idxR(Integer)
		Let idxC(Integer)
		Let defaultValue(String)
		Let strTorqueValue(String)
		Let lFilter(List)
		vTorqueValue=ThisObject->GetAttributeValuePointer("AIRBUS_E_FST_INSTANCE_DEFINITION_TV_Torque_Value")
		vTorqueNominalValue=ThisObject->GetAttributeValuePointer("AIRBUS_E_FST_INSTANCE_DEFINITION_TV_Nominal_Torque_Value")
		vTorqueMaxValue=ThisObject->GetAttributeValuePointer("AIRBUS_E_FST_INSTANCE_DEFINITION_TV_Maximum_Torque_Value")
		vTorqueMinValue=ThisObject->GetAttributeValuePointer("AIRBUS_E_FST_INSTANCE_DEFINITION_TV_Minimum_Torque_Value")
		// Added for N2H-26150: START
		//torqueValueSheet=CreateSheet("KnowledgeResources|Eurodrone_FST_INSTANCE_TORQUEVALUE_Values")
		strAttrValuesDocument = "Eurodrone_FST_INSTANCE_TORQUEVALUE_Values"
		Eurodrone_Util::UseExternalFile(strAttrValuesDocument,torqueValueSheet,lFilter)
		if (torqueValueSheet <> NULL)
		{
			idxR=1
		
			idxC=1
			for idxR while idxR < torqueValueSheet.RowsNb
			{
				// Added for N2H-26150: START
				strObsolete = ""
				idxAttrObsoleteCol = torqueValueSheet->LocateInRow(1, "Obsolete")
				if (idxAttrObsoleteCol <> 0)
				{
					strObsolete = torqueValueSheet->CellAsString(idxR, idxAttrObsoleteCol)
				}
				if (strObsolete <> "" AND strObsolete == "Yes")
				{
					continue
				}
				// Added for N2H-26150: END
				temp = torqueValueSheet->CellAsString(idxR,idxC)
				Trace(1,"temp>>>>>>>",temp)
		
				listTorqueValues->Append(temp)
		
				if("1"==torqueValueSheet->CellAsString(idxR,2))
				{
					defaultValue=temp
				}
			}
		}
		// Added for N2H-26150: END

		Trace(1,"Default Value>>>>>",defaultValue)
		vTorqueValue.AuthorizedValues=listTorqueValues
		Trace(1,"Added Values<<<>>>>")
		strTorqueValue=ThisObject->GetAttributeString("AIRBUS_E_FST_INSTANCE_DEFINITION_TV_Torque_Value")
		Trace(1,"strTorqueValue>>>>>>",strTorqueValue)
		if(NULL == strTorqueValue OR ""==strTorqueValue)
		{
			Trace(1,"Setting Default Value for Torque Value>>>>>>")
			vTorqueValue->SetValue(defaultValue)
			ThisObject->SetAttributeString("AIRBUS_E_FST_INSTANCE_DEFINITION_TV_Torque_Value",defaultValue)
		}
		if("HEAD"<>strTorqueValue AND "TAIL"<>strTorqueValue)
		{
			Trace(1,"Torque Value Not Head or Tail")

			if(vTorqueNominalValue.Constant==false)
			{
				ThisObject->SetAttributeReal("AIRBUS_E_FST_INSTANCE_DEFINITION_TV_Nominal_Torque_Value",0.0)

			}
			vTorqueNominalValue.Constant=true
			if(vTorqueMaxValue.Constant==false)
			{

				ThisObject->SetAttributeReal("AIRBUS_E_FST_INSTANCE_DEFINITION_TV_Maximum_Torque_Value",0.0)
			}
			vTorqueMaxValue.Constant=true
			if(vTorqueMinValue.Constant==false)

			{
				ThisObject->SetAttributeReal("AIRBUS_E_FST_INSTANCE_DEFINITION_TV_Minimum_Torque_Value",0.0)
			}
			vTorqueMinValue.Constant=true
		}
		else

		{
			Trace(1,"Torque Value Head or Tail")

			vTorqueNominalValue.Constant=false
			vTorqueMaxValue.Constant=false

			vTorqueMinValue.Constant=false			
		}
	}
	else
	{
		Trace(1,"This is Symmetry")
	}
	//N2H-16835:Added for Torque Customization :Ends
	//N2H-16833:Added for Cleaning/Stripping Customization:Starts
 	Trace(1,"Starting Customization  for Cleaning & Stripping")

	    Let vStrClnValue(ValuePointer)
		Let vStrClnBothValue(ValuePointer)
		Let vStrClnHeadValue(ValuePointer)
		Let vStrClnTailValue(ValuePointer)
		Let strCleanStrpValueSheet(DTSheetType)
		Let listClnStrValues(List)
		Let lFilter(List)

		Let tempValue(String)

		Let idxRow(Integer)

		Let idxCol(Integer)
		Let defaultValueCln(String)
		Let vCleaningStripping(Boolean)
		Let strClnBothValue(String)
		Let strClnHeadValue(String)
		Let strClnTailValue(String)
		vStrClnValue=ThisObject->GetAttributeValuePointer("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping")
		vStrClnBothValue=ThisObject->GetAttributeValuePointer("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Both_Side1")
		vStrClnHeadValue=ThisObject->GetAttributeValuePointer("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Head_Side1")
		vStrClnTailValue=ThisObject->GetAttributeValuePointer("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Tail_Side1")
		//strCleanStrpValueSheet=CreateSheet("KnowledgeResources|Eurodrone_FST_INSTANCE_CLEANINGSTRIPPING_Values")
		// Added for N2H-26150: START
		strAttrValuesDocument = "Eurodrone_FST_INSTANCE_CLEANINGSTRIPPING_Values"
		Eurodrone_Util::UseExternalFile(strAttrValuesDocument, strCleanStrpValueSheet, lFilter)
		if (strCleanStrpValueSheet <> NULL)
		{
			idxRow=1
			idxCol=1
	
			vCleaningStripping=ThisObject->GetAttributeBoolean("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping")
			Trace(1,"Boolean-----------------",vCleaningStripping)
			for idxRow while idxRow < strCleanStrpValueSheet.RowsNb
			{
				// Added for N2H-26150: START
				strObsolete = ""
				idxAttrObsoleteCol = strCleanStrpValueSheet->LocateInRow(1, "Obsolete")
				if (idxAttrObsoleteCol <> 0)
				{
					strObsolete = strCleanStrpValueSheet->CellAsString(idxRow, idxAttrObsoleteCol)
				}
				if (strObsolete <> "" AND strObsolete == "Yes")
				{
					continue
				}
				// Added for N2H-26150: END
				tempValue = strCleanStrpValueSheet->CellAsString(idxRow,idxCol)
				Trace(1,"tempValue>>>>>>>",tempValue)
				listClnStrValues->Append(tempValue)
				if("1"==strCleanStrpValueSheet->CellAsString(idxRow,2))
				{
					defaultValueCln=tempValue
				}
	
			}
		}
		// Added for N2H-26150: END

		Trace(1,"Default Value For Cleaning & Stripping>>>>>",defaultValueCln)
        vStrClnBothValue.Constant=false
	    vStrClnBothValue.AuthorizedValues=listClnStrValues
	    vStrClnHeadValue.Constant=false
		vStrClnHeadValue.AuthorizedValues=listClnStrValues


		vStrClnTailValue.Constant=false
		vStrClnTailValue.AuthorizedValues=listClnStrValues
		if("" == ThisObject->GetAttributeString("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Head_Side1"))


		{
			ThisObject->SetAttributeString("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Head_Side1",defaultValueCln)
		}
		if("" == ThisObject->GetAttributeString("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Tail_Side1"))
		{
			ThisObject->SetAttributeString("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Tail_Side1",defaultValueCln)
		}
		if("" == ThisObject->GetAttributeString("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Both_Side1"))
		{
			ThisObject->SetAttributeString("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Both_Side1",defaultValueCln)
		}
		if(false==vCleaningStripping)
		{
			Trace(1,"AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping-------------False")		
			
			vStrClnBothValue.Constant=false
			ThisObject->SetAttributeString("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Both_Side1",defaultValueCln)
			vStrClnBothValue.Constant=true	
			vStrClnHeadValue.Constant=false	
			ThisObject->SetAttributeString("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Head_Side1",defaultValueCln)			
			vStrClnHeadValue.Constant=true	
			vStrClnTailValue.Constant=false
            ThisObject->SetAttributeString("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Tail_Side1",defaultValueCln)			
			vStrClnTailValue.Constant=true	
		}
	    else

		{
			Trace(1,"AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping-------------True")	
			vStrClnBothValue.Constant=false		
			vStrClnHeadValue.Constant=false		
			vStrClnTailValue.Constant=false			
		}
		Trace(1,"Added Values<<<>>>>")
		strClnBothValue=ThisObject->GetAttributeString("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Both_Side1")
		Trace(1,"strClnBothValue>>>>>>>>>>",strClnBothValue)
		strClnHeadValue=ThisObject->GetAttributeString("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Head_Side1")
		Trace(1,"strClnHeadValue>>>>>>>>>>",strClnHeadValue)
		strClnTailValue=ThisObject->GetAttributeString("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Tail_Side1")
		Trace(1,"strClnTailValue>>>>>>>>>>",strClnTailValue)
		if(true==vCleaningStripping)
        {

			if((NULL<>strClnHeadValue AND "NA"<>strClnHeadValue) OR  (NULL<>strClnTailValue AND "NA"<>strClnTailValue))
			{
				Trace(1,"AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping-------------False & Head or Tail <> NA ")

				vStrClnBothValue.Constant=true

				Trace(1,">>>>>>>>>>>1>>>>>>>vStrClnBothValue.Constant<<<<<<<<<<<",vStrClnBothValue.Constant)
			}
			else
			{
				Trace(1,"AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping-------------True & Head OR Tail Equals to  NA")
				vStrClnBothValue.Constant=false
				Trace(1,"Value>>>>",vStrClnBothValue.Value)
				vStrClnBothValue.AuthorizedValues=listClnStrValues
				Trace(1,">>>>>>>>>>>2>>>>>>>vStrClnBothValue.Constant<<<<<<<<<<<",vStrClnBothValue.Constant)
			}
			if((NULL<>strClnBothValue AND "NA"<>strClnBothValue))
			{
				Trace(1,"AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Both_Side1 <> NA ")
				vStrClnHeadValue.Constant=false
				ThisObject->SetAttributeString("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Head_Side1",defaultValueCln)
				vStrClnHeadValue.Constant=true
				Trace(1,">>>>>>>>>>>2>>>>>>>vStrClnHeadValue.Constant<<<<<<<<<<<",vStrClnHeadValue.Constant)
			}
			if((NULL<>strClnTailValue AND "NA"<>strClnTailValue))
			{
				vStrClnHeadValue.Constant=false
				Trace(1,">>>>>>>>>>>3>>>>>>>vStrClnHeadValue.Constant<<<<<<<<<<<",vStrClnHeadValue.Constant)
			}
			if((NULL<>strClnBothValue AND "NA"<>strClnBothValue))
			{
				Trace(1,"AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Both_Side1 <> NA ")
				vStrClnTailValue.Constant=false
				ThisObject->SetAttributeString("AIRBUS_E_FST_INSTANCE_DEFINITION_STRIP_Cleaning_Stripping_Tail_Side1",defaultValueCln)
				vStrClnTailValue.Constant=true
				Trace(1,">>>>>>>>>>>5>>>>vStrClnTailValue.Constant<<<<<<<<<<<",vStrClnTailValue.Constant)
			}
			if((NULL<>strClnHeadValue AND "NA"<>strClnHeadValue))
			{
				vStrClnTailValue.Constant=false
				Trace(1,">>>>>>>>>>>6>>>>vStrClnTailValue.Constant<<<<<<<<<<<",vStrClnTailValue.Constant)

			}			
			
		} 
	//N2H-16833:Added for Cleaning/Stripping Customization:Ends 
	
}
//N2H-16817:Flexible Fastener Instance :Ends

//N2H-16810:Edition of Fastener and bundle :Starts
if(ThisObject->IsASortOf("BundleFastenerInstance"))
{
	if(ThisObject->HasAttribute("PLM_ExternalID"))
	{
		listDisabledValuePointer->Append("PLM_ExternalID")
	}
	if(ThisObject->HasAttribute("V_description"))
	{
		listDisabledValuePointer->Append("V_description")
	}
}
//N2H-16810:Edition of Fastener and bundle :Ends


listDisabledValuePointer->RemoveDuplicates()

for strValuePointerToDisable inside listDisabledValuePointer
{
	Trace(1 ,"Pointer Attribute Disabled : #", strValuePointerToDisable)

	pGenericPointer = ThisObject->GetAttributeValuePointer(strValuePointerToDisable)

	if ( pGenericPointer <> NULL )
	{
		list_ListValuefor_Attr = pGenericPointer.AuthorizedValues
		pGenericPointer.Constant = true
	}
}
//N2H-20888:Starts
Let xValue(String)
if(ThisObject->HasAttribute("AIRBUS_E_DEXT_TECHNICAL_INFORMATION_Action") AND (ThisObject->GetAttributeString("AIRBUS_E_DEXT_TECHNICAL_INFORMATION_Action")=="SYM"))
{
	Trace(1,"This is a Symmetry and all attributes should be locked for this object for manual edition")
	for xValue inside listLock
	{
		Trace(1,"Attribute Name----",xValue)
		pLockPointer=ThisObject->GetAttributeValuePointer(xValue)
		if(pLockPointer<>NULL)
		{
			pLockPointer.Constant=true
			Trace(1,xValue+" is locked")
		}
    	}
	//Add exception for fasteners N2H2-28284
	if (ThisObject.IsASortOf("PLMFst_FlexibleFastenerInstance"))
	{
		//Trace(1,"This is a Symmetry Fastener Instance so we're unblocking 2 attirbutes")
		if (ThisObject.HasAttribute("AIRBUS_E_Instance_EPASSY_InstanceDesignStage"))
		{
			pointValuesUnticked=ThisObject->GetAttributeValuePointer("AIRBUS_E_Instance_EPASSY_InstanceDesignStage")
			pointValuesUnticked.Constant=false
			//strDesignStage=ThisObject.GetAttributeString("AIRBUS_E_Instance_EPASSY_InstanceDesignStage")
			//Trace(1,"Unblocking attribute # with value #","AIRBUS_E_Instance_EPASSY_InstanceDesignStage",strDesignStage)
		}

		if (ThisObject.HasAttribute("AIRBUS_E_Instance_EPASSY_InstanceStatus"))
		{
			//strStatusInst=ThisObject.GetAttributeString("AIRBUS_E_Instance_EPASSY_InstanceStatus")
			pointValuesUnticked=ThisObject->GetAttributeValuePointer("AIRBUS_E_Instance_EPASSY_InstanceStatus")
			pointValuesUnticked.Constant=false
			//Trace(1,"Unblocking attribute # with value #","AIRBUS_E_Instance_EPASSY_InstanceStatus",strStatusInst)
			
		}
//		 START added code for N2H-28227 -Symmetry attribute of fastener
//		Unlocked this list of attributes for Symmetry of Fastener to be editable manually
		for selectedPrimeryFastenerAttribute inside listPrimaryFastenersAttributeEditable
		{
			if(ThisObject.HasAttribute(selectedPrimeryFastenerAttribute))
			{
				pointValueUnlockedForFastener=ThisObject->GetAttributeValuePointer(selectedPrimeryFastenerAttribute)
				pointValueUnlockedForFastener.Constant=false
			}
		}
//END added code for N2H-28227
	}
		//End exception for 28284	 
}
	
//N2H-20888:Ends

Trace (1, "END: Executing Rule >> VPMInstance_PLMAttributesPropagation v3.0: #", Parameters->GetAttributeString("PropagationMode"))
